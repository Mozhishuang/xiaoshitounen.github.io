<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小石头&#39;s Blog</title>
  
  <subtitle>成功来源于每一次的坚持</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fanandjiu.com/"/>
  <updated>2020-07-28T03:02:31.399Z</updated>
  <id>http://fanandjiu.com/</id>
  
  <author>
    <name>小石头</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kotlin项目学习-简单的点击事件</title>
    <link href="http://fanandjiu.com/Kotlin%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0-%E7%AE%80%E5%8D%95%E7%9A%84%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6/"/>
    <id>http://fanandjiu.com/Kotlin%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0-%E7%AE%80%E5%8D%95%E7%9A%84%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6/</id>
    <published>2020-07-27T17:42:25.000Z</published>
    <updated>2020-07-28T03:02:31.399Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-认识-View-OnClickListener"><a href="#一-认识-View-OnClickListener" class="headerlink" title="一. 认识 View.OnClickListener"></a>一. 认识 View.OnClickListener</h3><h4 id="1-当前所在类实现接口"><a href="#1-当前所在类实现接口" class="headerlink" title="1. 当前所在类实现接口"></a>1. 当前所在类实现接口</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置监听者是当前类的对象，当前类的对象需要实现View.OnClickListener接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>(), View.OnClickListener&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置监听对象View.OnClickListener接口中的方法</span></span><br><span class="line">        btn.setOnClickListener(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听对象实现   </span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onClick</span><span class="params">(v: <span class="type">View</span>?)</span></span> &#123;</span><br><span class="line">        btn.text = <span class="string">"你好"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-创建一个新类实现接口"><a href="#2-创建一个新类实现接口" class="headerlink" title="2. 创建一个新类实现接口"></a>2. 创建一个新类实现接口</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>()&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//传入创建的实现类</span></span><br><span class="line">        btn.setOnClickListener(Temp())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个实现View.OnClickListener接口的类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Temp</span>: <span class="type">View.OnClickListener&#123;</span></span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onClick</span><span class="params">(v: <span class="type">View</span>?)</span></span> &#123;</span><br><span class="line">            v <span class="keyword">as</span> TextView</span><br><span class="line">            v.text = <span class="string">"你好"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-创建匿名类实现接口"><a href="#3-创建匿名类实现接口" class="headerlink" title="3. 创建匿名类实现接口"></a>3. 创建匿名类实现接口</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>()&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用匿名类的方式</span></span><br><span class="line">        btn.setOnClickListener(<span class="keyword">object</span>: View.OnClickListener &#123;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onClick</span><span class="params">(v: <span class="type">View</span>?)</span></span> &#123;</span><br><span class="line">                btn.text = <span class="string">"你好"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匿名类的改造</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Lambda表达式，接口中只有一个重写的方法时</span></span><br><span class="line">btn.setOnClickListener(&#123;view: View -&gt; <span class="built_in">Unit</span></span><br><span class="line">    btn.text = <span class="string">"你好"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口重写的方法的返回值为Unit，返回值可以省略</span></span><br><span class="line">btn.setOnClickListener(&#123;view: View -&gt;</span><br><span class="line">    btn.text = <span class="string">"你好"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口作为最后一个参数时，可以放在外边</span></span><br><span class="line">btn.setOnClickListener()&#123;view: View -&gt;</span><br><span class="line">    btn.text = <span class="string">"你好"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只有接口做为参数时，调用的方法的()可以省略</span></span><br><span class="line">btn.setOnClickListener&#123;view: View -&gt;</span><br><span class="line">    btn.text = <span class="string">"你好"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口重写的方法只有一个参数时，参数可以省略</span></span><br><span class="line">btn.setOnClickListener&#123;</span><br><span class="line">    btn.text = <span class="string">"你好"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>补充知识：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从当前的Activity跳转到SecondActivity</span></span><br><span class="line">startActivity(Intent(<span class="keyword">this</span>,SecondActivity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>))</span></span><br></pre></td></tr></table></figure><h3 id="二-认识-横竖屏"><a href="#二-认识-横竖屏" class="headerlink" title="二. 认识 横竖屏"></a>二. 认识 横竖屏</h3><p><img src="https://bytedance-1300729795.cos.ap-guangzhou.myqcloud.com/Kotlin/1.Know/orition.png" alt=""></p><h4 id="1-设置Activity的横竖屏状态"><a href="#1-设置Activity的横竖屏状态" class="headerlink" title="1. 设置Activity的横竖屏状态"></a>1. 设置Activity的横竖屏状态</h4><p>AndroidManifest.xml文件中找到所要设置的Activity的标签，标签中社会组<code>screenOrientation</code>的值即可。</p><ul><li>landscape：强制横屏</li><li>portrait：强制竖屏</li><li>user：用户当前的首选方向</li><li>behind：与在活动堆栈下的活相同方向</li><li>sensor：根据物理方向传感器确定方向，取决于用户手持的方向</li><li>nosensor：忽略传感器，即关闭重力感应，跟随系统确定其横屏还是竖屏</li></ul><h4 id="2-设置对应状态的布局文件"><a href="#2-设置对应状态的布局文件" class="headerlink" title="2. 设置对应状态的布局文件"></a>2. 设置对应状态的布局文件</h4><p>默认的布局文件是竖屏状态下显示。</p><p>添加<code>layout-land</code>文件夹，存放和layout文件夹中相同的文件名，横屏状态下即会加载对应的文件。</p><h3 id="三-认识also，apply，with，run"><a href="#三-认识also，apply，with，run" class="headerlink" title="三. 认识also，apply，with，run"></a>三. 认识also，apply，with，run</h3><p>Java风格的书写方式</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> animator = ObjectAnimator.ofFloat(btn, <span class="string">"rotation"</span>, <span class="number">0f</span>, <span class="number">360f</span>)</span><br><span class="line">animator.duration = <span class="number">1000</span></span><br><span class="line">animator.start()</span><br></pre></td></tr></table></figure><h4 id="1-also"><a href="#1-also" class="headerlink" title="1. also"></a>1. also</h4><p>改写成also的方式</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ObjectAnimator.ofFloat(btn, <span class="string">"rotation"</span>, <span class="number">0f</span>, <span class="number">360f</span>).also &#123; </span><br><span class="line">    it.duration = <span class="number">1000</span></span><br><span class="line">    it.start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>also的原理</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@kotlin</span>.<span class="keyword">internal</span>.InlineOnly</span><br><span class="line"><span class="meta">@SinceKotlin(<span class="meta-string">"1.1"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> T.<span class="title">also</span><span class="params">(block: (<span class="type">T</span>) -&gt; <span class="type">Unit</span>)</span></span>: T &#123;</span><br><span class="line">    contract &#123;</span><br><span class="line">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class="line">    &#125;</span><br><span class="line">    block(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-apply"><a href="#2-apply" class="headerlink" title="2. apply"></a>2. apply</h4><p>改写成apply的方式</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ObjectAnimator.ofFloat(btn, <span class="string">"rotation"</span>, <span class="number">0f</span>, <span class="number">360f</span>).apply &#123;</span><br><span class="line">    duration = <span class="number">1000</span></span><br><span class="line">    start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>apply的原理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@kotlin</span>.internal.InlineOnly</span><br><span class="line"><span class="keyword">public</span> inline fun &lt;T&gt; T.apply(block: T.() -&gt; Unit): T &#123;</span><br><span class="line">    contract &#123;</span><br><span class="line">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class="line">    &#125;</span><br><span class="line">    block()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-with和run"><a href="#3-with和run" class="headerlink" title="3. with和run"></a>3. with和run</h4><p>以后再谈</p><h3 id="四-国际化"><a href="#四-国际化" class="headerlink" title="四. 国际化"></a>四. 国际化</h3><p>找到String.xml文件，点击open editor，点击图标添加一门语言。</p><p>设置文本的默认值和对应语言的值，可以选择是否翻译。</p><p>查看对应的效果需要在手机中将语言改为对应的语言。</p><p><img src="https://bytedance-1300729795.cos.ap-guangzhou.myqcloud.com/Kotlin/1.Know/open.png" alt=""></p><p><img src="https://bytedance-1300729795.cos.ap-guangzhou.myqcloud.com/Kotlin/1.Know/global.png" alt=""></p><p><img src="https://bytedance-1300729795.cos.ap-guangzhou.myqcloud.com/Kotlin/1.Know/settting.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-认识-View-OnClickListener&quot;&gt;&lt;a href=&quot;#一-认识-View-OnClickListener&quot; class=&quot;headerlink&quot; title=&quot;一. 认识 View.OnClickListener&quot;&gt;&lt;/a&gt;一. 认识 View
      
    
    </summary>
    
    
      <category term="Kotlin项目学习" scheme="http://fanandjiu.com/categories/Kotlin%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Kotlin项目学习" scheme="http://fanandjiu.com/tags/Kotlin%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Git版本控制-基础知识</title>
    <link href="http://fanandjiu.com/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://fanandjiu.com/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2020-07-25T04:10:29.000Z</published>
    <updated>2020-08-06T08:26:20.083Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-起步"><a href="#一-起步" class="headerlink" title="一. 起步"></a>一. 起步</h2><h3 id="1-Mac上安装-GIt"><a href="#1-Mac上安装-GIt" class="headerlink" title="1. Mac上安装 GIt"></a>1. Mac上安装 GIt</h3><p>安装的方式有两种：</p><ul><li>安装Xcode，Xcode自带Git，不建议。</li><li><a href="https://git-scm.com/download/mac" target="_blank" rel="noopener">官网下载</a>，建议。</li></ul><p>安装结束后，查看Git的版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><h3 id="2-Git的配置"><a href="#2-Git的配置" class="headerlink" title="2. Git的配置"></a>2. Git的配置</h3><p>Git 自带一个 <code>git config</code> 的工具来帮助设置控制 Git 外观和行为的配置变量。 这些变量存储在三个不同的位置：</p><ul><li><code>/etc/gitconfig</code> 文件: 包含系统上每一个用户及他们仓库的通用配置。</li><li><code>~/.gitconfig</code> 或 <code>~/.config/git/config</code> 文件：只针对当前用户。</li><li><code>.git/config</code> 文件：当前使用仓库的 Git 目录中的 <code>config</code> 文件，针对该仓库。</li></ul><p>设置用户信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个东西很重要，多人协作的时候能查看到这些信息</span></span><br><span class="line">git config --global user.name <span class="string">"你的用户名"</span></span><br><span class="line">git config --global user.email 你的邮箱</span><br></pre></td></tr></table></figure><p>查看配置信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><p><img src="https://bytedance-1300729795.cos.ap-guangzhou.myqcloud.com/Git/config_list.png" alt=""></p><h4 id="3-获取帮助"><a href="#3-获取帮助" class="headerlink" title="3. 获取帮助"></a>3. 获取帮助</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git help -a</span><br><span class="line"></span><br><span class="line"><span class="comment">//例如：git help config</span></span><br><span class="line">git help &lt;verb&gt;</span><br></pre></td></tr></table></figure><h2 id="二-Git基础"><a href="#二-Git基础" class="headerlink" title="二. Git基础"></a>二. Git基础</h2><h3 id="1-获取Git仓库"><a href="#1-获取Git仓库" class="headerlink" title="1. 获取Git仓库"></a>1. 获取Git仓库</h3><h4 id="①-在已有的目录中初始化仓库"><a href="#①-在已有的目录中初始化仓库" class="headerlink" title="① 在已有的目录中初始化仓库"></a>① 在已有的目录中初始化仓库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>1&gt; 该命令将创建一个名为 <code>.git</code> 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。 但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪。</p><p>2&gt;<code>.git</code> 的子目录默认看不到，使用<code>Command + Shift + .</code>查看隐藏的文件。</p><p><img src="https://bytedance-1300729795.cos.ap-guangzhou.myqcloud.com/Git/git_dir.png" alt=""></p><h4 id="②-克隆已有的仓库"><a href="#②-克隆已有的仓库" class="headerlink" title="② 克隆已有的仓库"></a>② 克隆已有的仓库</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//克隆path路径的仓库到本地，仓库名和拉取仓库的名相同</span></span><br><span class="line">git clone path</span><br><span class="line"></span><br><span class="line"><span class="comment">//克隆path路径的仓库到本地，仓库名为name</span></span><br><span class="line">git clone path name</span><br></pre></td></tr></table></figure><h3 id="2-Git基础操作"><a href="#2-Git基础操作" class="headerlink" title="2. Git基础操作"></a>2. Git基础操作</h3><h4 id="①-文件状态分类"><a href="#①-文件状态分类" class="headerlink" title="① 文件状态分类"></a>① 文件状态分类</h4><p>请记住，你工作目录下的每一个文件都不外乎这两种状态：已跟踪（<code>Untracked</code>）或未跟踪（<code>Tracked</code>）。</p><p>已跟踪的文件是指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后，它们的状态可能处于未修改（<code>Unmodified</code>），已修改（<code>Modified</code>）或已放入暂存区（<code>Staged</code>）。 </p><p>初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态。</p><p><img src="https://bytedance-1300729795.cos.ap-guangzhou.myqcloud.com/Git/status_graph.png" alt=""></p><h4 id="②-查看文件状态"><a href="#②-查看文件状态" class="headerlink" title="② 查看文件状态"></a>② 查看文件状态</h4><p>1&gt; 如果在克隆仓库后立即使用<code>git status</code>命令，会看到类似这样的输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">On branch master</span><br><span class="line">nothing to commit, working directory clean</span><br></pre></td></tr></table></figure><p>这说明你现在的工作目录相当干净。换句话说，所有已跟踪文件在上次提交后都未被更改过。 此外，上面的信息还表明，当前目录下没有出现任何处于未跟踪状态的新文件，否则 Git 会在这里列出来。 最后，该命令还显示了当前所在分支，并告诉你这个分支同远程服务器上对应的分支没有偏离。 现在，分支名是 “master”,这是默认的分支名。</p><p>2&gt; 如果在刚刚<code>git init</code>的仓库使用此命令，会看到类似这样的输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line"><span class="function">nothing to <span class="title">commit</span> <span class="params">(create/copy files and use <span class="string">"git add"</span> to track)</span></span></span><br></pre></td></tr></table></figure><p>这和上面的说明一致，只不过我们没有提交东西。</p><p>3&gt; 现在，让我们在项目下创建一个新的 README 文件。 如果之前并不存在这个文件，使用 <code>git status</code> 命令，你将看到一个新的未跟踪文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to include in what will be committed)</span><br><span class="line">README.txt</span><br><span class="line"></span><br><span class="line"><span class="function">nothing added to commit but untracked files <span class="title">present</span> <span class="params">(use <span class="string">"git add"</span> to track)</span></span></span><br></pre></td></tr></table></figure><p>在状态报告中可以看到新建的 README 文件出现在 <code>Untracked files</code> 下面。 未跟踪的文件意味着 Git 在之前的快照（提交）中没有这些文件；Git 不会自动将之纳入跟踪范围。</p><p>4&gt; 我们使用<code>git add</code>跟踪一个文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git rm --cached &lt;file&gt;..."</span> to unstage)</span><br><span class="line"><span class="keyword">new</span> file:   README.txt</span><br></pre></td></tr></table></figure><p>此时我们看到看到 README 文件已被跟踪，并处于暂存状态。只要在 <code>Changes to be committed</code> 这行下面的，就说明是已暂存状态。 如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。</p><p> <code>git add</code> 命令使用文件或目录的路径作为参数；如果参数是目录的路径，该命令将递归地跟踪该目录下的所有文件。<code>git add *</code>是追踪所有文件的意思。</p><p>我们尝试创建一个<code>CONTRIBUTING.txt</code>文件，并继续使用<code>git add</code>跟踪一个文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git rm --cached &lt;file&gt;..."</span> to unstage)</span><br><span class="line"><span class="keyword">new</span> file:   README.txt</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to include in what will be committed)</span><br><span class="line">CONTRIBUTING.txt</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git rm --cached &lt;file&gt;..."</span> to unstage)</span><br><span class="line"><span class="keyword">new</span> file:   CONTRIBUTING.txt</span><br><span class="line"><span class="keyword">new</span> file:   README.txt</span><br></pre></td></tr></table></figure><p>5&gt; 现在我们来修改一个已被跟踪的文件。 如果你修改了一个名为 <code>CONTRIBUTING.txt 的已被跟踪的文件，然后运行</code>git status` 命令，会看到下面内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git rm --cached &lt;file&gt;..."</span> to unstage)</span><br><span class="line"><span class="keyword">new</span> file:   CONTRIBUTING.txt</span><br><span class="line"><span class="keyword">new</span> file:   README.txt</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">"git restore &lt;file&gt;..."</span> to discard changes in working directory)</span><br><span class="line">modified:   CONTRIBUTING.txt</span><br></pre></td></tr></table></figure><p>文件 <code>CONTRIBUTING.txt</code> 出现在 <code>Changes not staged for commit</code> 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。 要暂存这次更新，需要运行 <code>git add</code> 命令。</p><p><code>git add</code> 命令：</p><ul><li>开始跟踪新文件</li><li>把已跟踪的文件放到暂存区</li><li>合并时把有冲突的文件标记为已解决状态</li></ul><p>所以将这个命令理解为“添加内容到下一次提交中”。</p><p>此时有一个疑问：CONTRIBUTING.txt` 文件同时出现在暂存区和非暂存区，这是允许的吗？</p><p>实际上 Git 只不过暂存了你运行 <code>git add</code> 命令时的版本， 如果你现在提交，<code>CONTRIBUTING.txt</code> 的版本是你最后一次运行 <code>git add</code> 命令时的那个版本，而不是你运行 <code>git commit</code> 时，在工作目录中的当前版本。 </p><p>所以，运行了 <code>git add</code> 之后又作了修订的文件，需要重新运行<code>git add</code> 把最新版本重新暂存起来。</p><p>现在，解决困惑后，我们运行 <code>git add</code> 命令把已跟踪的文件<code>CONTRIBUTING.txt</code>放到暂存区：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git rm --cached &lt;file&gt;..."</span> to unstage)</span><br><span class="line"><span class="keyword">new</span> file:   CONTRIBUTING.txt</span><br><span class="line"><span class="keyword">new</span> file:   README.txt</span><br></pre></td></tr></table></figure><p>6&gt; 实际操作截图</p><p><img src="https://bytedance-1300729795.cos.ap-guangzhou.myqcloud.com/Git/ZSH/git_zsh1.png" alt=""></p><p><img src="https://bytedance-1300729795.cos.ap-guangzhou.myqcloud.com/Git/ZSH/git_zsh2.png" alt=""></p><h4 id="③-忽略文件"><a href="#③-忽略文件" class="headerlink" title="③ 忽略文件"></a>③ 忽略文件</h4><p>一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以创建一个名为 <code>.gitignore</code> 的文件，列出要忽略的文件模式。</p><p>注意，<code>.gitignore</code>文件需要被纳入 Git 的管理，也就是处于追踪状态才能生效。（创建以<code>.</code>开头的文件会被隐藏的，需要打开隐藏文件）</p><p>我们来看一个实际的例子：</p><p><img src="https://bytedance-1300729795.cos.ap-guangzhou.myqcloud.com/Git/gitnore_dir.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查看忽略的文件</span></span><br><span class="line">cat .gitignore</span><br><span class="line"></span><br><span class="line">*.c%</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查看状态</span></span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git rm --cached &lt;file&gt;..."</span> to unstage)</span><br><span class="line"><span class="keyword">new</span> file:   .gitignore</span><br><span class="line"><span class="keyword">new</span> file:   CONTRIBUTING.txt</span><br><span class="line"><span class="keyword">new</span> file:   README.txt</span><br></pre></td></tr></table></figure><p>理论上来说，log.c文件应该会出现在Untracked files下面，但是由于被<code>.gitignore</code>文件列出，所以被忽略了。</p><p>文件 <code>.gitignore</code> 的格式规范如下：</p><ul><li>所有空行或者以 <code>＃</code> 开头的行都会被 Git 忽略。</li><li>可以使用标准的 glob 模式匹配。</li><li>匹配模式可以以（<code>/</code>）开头防止递归。</li><li>匹配模式可以以（<code>/</code>）结尾指定目录。</li><li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（<code>!</code>）取反。</li></ul><p>GitHub 有一个十分详细的针对数十种项目及语言的 <code>.gitignore</code> 文件列表，你可以在 <a href="https://github.com/github/gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore</a> 找到它。</p><h4 id="④-查看已暂存和未暂存的修改"><a href="#④-查看已暂存和未暂存的修改" class="headerlink" title="④ 查看已暂存和未暂存的修改"></a>④ 查看已暂存和未暂存的修改</h4><p>1&gt; 首先我们简单的修改<code>CONTRIBUTING.txt</code>文件，原本它是一个空的，在里面添加<code>hello</code>。使用<code>git status</code>查看得到以下内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git rm --cached &lt;file&gt;..."</span> to unstage)</span><br><span class="line"><span class="keyword">new</span> file:   .gitignore</span><br><span class="line"><span class="keyword">new</span> file:   CONTRIBUTING.txt</span><br><span class="line"><span class="keyword">new</span> file:   README.txt</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">"git restore &lt;file&gt;..."</span> to discard changes in working directory)</span><br><span class="line">modified:   CONTRIBUTING.txt</span><br></pre></td></tr></table></figure><p>2&gt; 使用<code>git diff</code>查看已暂存和未暂存的修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/CONTRIBUTING.txt b/CONTRIBUTING.txt</span><br><span class="line">index e69de29..b6fc4c6 <span class="number">100644</span></span><br><span class="line">--- a/CONTRIBUTING.txt</span><br><span class="line">+++ b/CONTRIBUTING.txt</span><br><span class="line">@@ -<span class="number">0</span>,<span class="number">0</span> +<span class="number">1</span> @@</span><br><span class="line">+hello</span><br><span class="line">\ No newline at end of file</span><br></pre></td></tr></table></figure><p>3&gt; 使用p4merge作为可视化工具，下载地址：<a href="https://link.jianshu.com/?t=https://www.perforce.com/product/components/perforce-visual-merge-and-diff-tools" target="_blank" rel="noopener">perforce-visual-merge-and-diff-tools</a>。下载到<code>P4V.dmg</code>文件后，双击打开，拖动<code>P4Merge</code>到<code>Application</code>文件夹上就可以完成安装了。</p><p>配置p4merge，输入以下命令即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global diff.tool p4merge</span><br><span class="line">  </span><br><span class="line">git config --global difftool.p4merge.cmd /Applications/p4merge.app/Contents/MacOS/p4merge</span><br><span class="line">  </span><br><span class="line">git config --global difftool.p4merge.cmd <span class="string">"/Applications/p4merge.app/Contents/Resources/launchp4merge \$LOCAL \$REMOTE"</span></span><br></pre></td></tr></table></figure><p>4&gt; 使用可视化工具查看已暂存和未暂存的修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git difftool</span><br><span class="line">  </span><br><span class="line">Viewing (<span class="number">1</span>/<span class="number">1</span>): <span class="string">'CONTRIBUTING.txt'</span></span><br><span class="line">Launch <span class="string">'p4merge'</span> [Y/n]? </span><br><span class="line">  </span><br><span class="line"><span class="comment">//输入y即可</span></span><br></pre></td></tr></table></figure><p><img src="https://bytedance-1300729795.cos.ap-guangzhou.myqcloud.com/Git/p4merge_show.png" alt=""></p><p>5&gt; 查看已经暂存起来的变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached</span><br><span class="line"></span><br><span class="line">git diff --staged</span><br></pre></td></tr></table></figure><h4 id="⑤-提交更新"><a href="#⑤-提交更新" class="headerlink" title="⑤ 提交更新"></a>⑤ 提交更新</h4><p>提交更新的时候请一定要确认还有什么修改过的或新建的文件还没有 <code>git add</code> 过，否则提交的时候不会记录这些还没暂存起来的变化。</p><p> 所以，每次准备提交前，先用 <code>git status</code> 看下，是不是都已暂存起来了， 然后再运行提交命令 <code>git commit</code>。</p><p>如果你想一次性提交并写入commit的信息可以使用下面的方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"commit信息"</span></span><br></pre></td></tr></table></figure><p>如果我们在之前的基础上提交，会出现下面的信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[master (root-commit) <span class="number">1f</span>823c7] 测试</span><br><span class="line"> <span class="number">3</span> files changed, <span class="number">2</span> insertions(+)</span><br><span class="line"> create mode <span class="number">100644</span> .gitignore</span><br><span class="line"> create mode <span class="number">100644</span> CONTRIBUTING.txt</span><br><span class="line"> create mode <span class="number">100644</span> README.txt</span><br></pre></td></tr></table></figure><p>当前是在哪个分支（<code>master</code>）提交的，本次提交的完整 SHA-1 校验和是什么（<code>1f823c7</code>），本次提交commit的信息是什么（<code>测试</code>），以及在本次提交中，有多少文件修订过，多少行添加和删改过。</p><p>还有一种直接提交的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git commit -a</span><br><span class="line"></span><br><span class="line">git commit -a -m <span class="string">'commit信息'</span></span><br></pre></td></tr></table></figure><p>Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 <code>git add</code> 步骤</p><h4 id="⑥-移除文件"><a href="#⑥-移除文件" class="headerlink" title="⑥ 移除文件"></a>⑥ 移除文件</h4><p>1&gt; 从已跟踪文件清单中移除并连带从工作目录中删除指定的文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git rm [path]</span><br><span class="line">  </span><br><span class="line"><span class="comment">//递归删除，适用于删除批量文件</span></span><br><span class="line">git rm [path] -r</span><br><span class="line">  </span><br><span class="line"><span class="comment">//强制删除</span></span><br><span class="line">git rm [path] -f</span><br></pre></td></tr></table></figure><p>删除之后，下一次提交时，该文件就不再纳入版本管理了。</p><p>如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 <code>-f</code>（译注：即 force 的首字母）。 这是一种安全特性，用于防止误删还没有添加到快照的数据，这样的数据不能被 Git 恢复。</p><p>2&gt; 从已跟踪文件清单中移除但是仍然希望保留在当前工作目录中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached [path]</span><br></pre></td></tr></table></figure><h4 id="⑦-重命名文件"><a href="#⑦-重命名文件" class="headerlink" title="⑦ 重命名文件"></a>⑦ 重命名文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git mv file_from file_to</span><br><span class="line">  </span><br><span class="line"><span class="comment">//相当于</span></span><br><span class="line">mv file_from file_to</span><br><span class="line">git rm file_from</span><br><span class="line">git add file_to</span><br></pre></td></tr></table></figure><h4 id="⑧-查看提交历史"><a href="#⑧-查看提交历史" class="headerlink" title="⑧ 查看提交历史"></a>⑧ 查看提交历史</h4><p>1&gt; 我们可以使用下面的命令回顾提交历史：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><p>按提交时间列出所有的更新，最近的更新排在最上面。 </p><p>对我们之前的Test1仓库进行回顾，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">commit <span class="number">1f</span>823c7ab4fc9ab44f8480fb18caf8887394f9ad (HEAD -&gt; master)</span><br><span class="line">Author: xulei &lt;<span class="number">2867584387</span><span class="meta">@qq</span>.com&gt;</span><br><span class="line">Date:   Sat Jul <span class="number">25</span> <span class="number">14</span>:<span class="number">40</span>:<span class="number">07</span> <span class="number">2020</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">    测试</span><br></pre></td></tr></table></figure><p>2&gt; 显示每次提交的内容差异，可以快速浏览某个搭档提交的 commit 所带来的变化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git log -p</span><br><span class="line"></span><br><span class="line"><span class="comment">//仅显示最近两次提交</span></span><br><span class="line">git log -p -<span class="number">2</span></span><br></pre></td></tr></table></figure><p>对我们之前的Test1仓库进行回顾，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">commit <span class="number">1f</span>823c7ab4fc9ab44f8480fb18caf8887394f9ad (HEAD -&gt; master)</span><br><span class="line">Author: xulei &lt;<span class="number">2867584387</span><span class="meta">@qq</span>.com&gt;</span><br><span class="line">Date:   Sat Jul <span class="number">25</span> <span class="number">14</span>:<span class="number">40</span>:<span class="number">07</span> <span class="number">2020</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">    测试</span><br><span class="line"></span><br><span class="line">diff --git a/.gitignore b/.gitignore</span><br><span class="line"><span class="keyword">new</span> file mode <span class="number">100644</span></span><br><span class="line">index <span class="number">0000000</span>..<span class="number">09</span>b2ac1</span><br><span class="line">--- /dev/<span class="keyword">null</span></span><br><span class="line">+++ b/.gitignore</span><br><span class="line">@@ -<span class="number">0</span>,<span class="number">0</span> +<span class="number">1</span> @@</span><br><span class="line">+*.c</span><br><span class="line">\ No newline at end of file</span><br><span class="line">diff --git a/CONTRIBUTING.txt b/CONTRIBUTING.txt</span><br><span class="line"><span class="keyword">new</span> file mode <span class="number">100644</span></span><br><span class="line">index <span class="number">0000000</span>..b6fc4c6</span><br><span class="line">--- /dev/<span class="keyword">null</span></span><br><span class="line">+++ b/CONTRIBUTING.txt</span><br><span class="line">@@ -<span class="number">0</span>,<span class="number">0</span> +<span class="number">1</span> @@</span><br><span class="line">+hello</span><br><span class="line">\ No newline at end of file</span><br><span class="line">diff --git a/README.txt b/README.txt</span><br></pre></td></tr></table></figure><p>3&gt; 查看每次提交的简略的统计信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --stat</span><br></pre></td></tr></table></figure><p>对我们之前的Test1仓库进行回顾，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">commit <span class="number">1f</span>823c7ab4fc9ab44f8480fb18caf8887394f9ad (HEAD -&gt; master)</span><br><span class="line">Author: xulei &lt;<span class="number">2867584387</span><span class="meta">@qq</span>.com&gt;</span><br><span class="line">Date:   Sat Jul <span class="number">25</span> <span class="number">14</span>:<span class="number">40</span>:<span class="number">07</span> <span class="number">2020</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">    测试</span><br><span class="line"></span><br><span class="line"> .gitignore       | <span class="number">1</span> +</span><br><span class="line"> CONTRIBUTING.txt | <span class="number">1</span> +</span><br><span class="line"> README.txt       | <span class="number">0</span></span><br><span class="line"> <span class="number">3</span> files changed, <span class="number">2</span> insertions(+)</span><br></pre></td></tr></table></figure><p>4&gt; 指定使用不同于默认格式的方式展示提交历史</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --pretty=format</span><br></pre></td></tr></table></figure><p>对我们之前的Test1仓库进行回顾，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty=oneline</span><br><span class="line">  </span><br><span class="line"><span class="number">1f</span>823c7ab4fc9ab44f8480fb18caf8887394f9ad (HEAD -&gt; master) 测试</span><br></pre></td></tr></table></figure><p>format，常用的选项如下：</p><table><thead><tr><th align="left">选项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>%H</code></td><td align="left">提交对象（commit）的完整哈希字串</td></tr><tr><td align="left"><code>%h</code></td><td align="left">提交对象的简短哈希字串</td></tr><tr><td align="left"><code>%T</code></td><td align="left">树对象（tree）的完整哈希字串</td></tr><tr><td align="left"><code>%t</code></td><td align="left">树对象的简短哈希字串</td></tr><tr><td align="left"><code>%P</code></td><td align="left">父对象（parent）的完整哈希字串</td></tr><tr><td align="left"><code>%p</code></td><td align="left">父对象的简短哈希字串</td></tr><tr><td align="left"><code>%an</code></td><td align="left">作者（author）的名字</td></tr><tr><td align="left"><code>%ae</code></td><td align="left">作者的电子邮件地址</td></tr><tr><td align="left"><code>%ad</code></td><td align="left">作者修订日期（可以用 –date= 选项定制格式）</td></tr><tr><td align="left"><code>%ar</code></td><td align="left">作者修订日期，按多久以前的方式显示</td></tr><tr><td align="left"><code>%cn</code></td><td align="left">提交者（committer）的名字</td></tr><tr><td align="left"><code>%ce</code></td><td align="left">提交者的电子邮件地址</td></tr><tr><td align="left"><code>%cd</code></td><td align="left">提交日期</td></tr><tr><td align="left"><code>%cr</code></td><td align="left">提交日期，按多久以前的方式显示</td></tr><tr><td align="left"><code>%s</code></td><td align="left">提交说明</td></tr></tbody></table><p>给出一个小例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty=format:<span class="string">"%h - %an, %ar : %s"</span></span><br><span class="line">ca82a6d - Scott Chacon, <span class="number">6</span> years ago : changed the version number</span><br><span class="line"><span class="number">085</span>bb3b - Scott Chacon, <span class="number">6</span> years ago : removed unnecessary test</span><br><span class="line">a11bef0 - Scott Chacon, <span class="number">6</span> years ago : first commit</span><br></pre></td></tr></table></figure><p>5&gt; 显示 ASCII 图形表示的分支合并历史</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --graph</span><br></pre></td></tr></table></figure><p>当 oneline 或 format 与另一个 <code>log</code> 选项 <code>--graph</code> 结合使用时尤其有用。 这个选项添加了一些ASCII字符串来形象地展示你的分支、合并历史：</p><p>给出一个小例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty=format:<span class="string">"%h %s"</span> --graph</span><br><span class="line">* <span class="number">2</span>d3acf9 ignore errors from SIGCHLD on trap</span><br><span class="line">*  <span class="number">5e3</span>ee11 Merge branch <span class="string">'master'</span> of git:<span class="comment">//github.com/dustin/grit</span></span><br><span class="line">|\</span><br><span class="line">| * <span class="number">420</span>eac9 Added a method <span class="keyword">for</span> getting the current branch.</span><br><span class="line">* | <span class="number">30e367</span>c timeout code and tests</span><br><span class="line">* | <span class="number">5</span>a09431 add timeout protection to grit</span><br><span class="line">* | e1193f8 support <span class="keyword">for</span> heads with slashes in them</span><br><span class="line">|/</span><br><span class="line">* d6016bc require time <span class="keyword">for</span> xmlschema</span><br><span class="line">*  <span class="number">11</span>d191e Merge branch <span class="string">'defunkt'</span> into local</span><br></pre></td></tr></table></figure><h4 id="⑨-撤销，回滚操作"><a href="#⑨-撤销，回滚操作" class="headerlink" title="⑨ 撤销，回滚操作"></a>⑨ 撤销，回滚操作</h4><p>1&gt; 重新提交</p><p>有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 <code>--amend</code> 选项的提交命令尝试重新提交。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><p>这个命令会将暂存区中的文件提交。 如果自上次提交以来你还未做任何修改（例如，在上次提交后马上执行了此命令），那么快照会保持不变，而你所修改的只是提交信息。</p><p>文本编辑器启动后，可以看到之前的提交信息。 编辑后保存会覆盖原来的提交信息。</p><p>给出一个小例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">'initial commit'</span></span><br><span class="line">$ git add forgotten_file</span><br><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure><p>最终你只会有一个提交 - 第二次提交将代替第一次提交的结果。</p><p>2&gt; 取消暂存的文件</p><p>例如，你已经修改了两个文件并且想要将它们作为两次独立的修改提交，但是却意外地输入了 <code>git add *</code> 暂存了它们两个。 如何只取消暂存两个中的一个呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git add *</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</span><br><span class="line"></span><br><span class="line">    renamed:    README.md -&gt; README</span><br><span class="line">    modified:   CONTRIBUTING.md</span><br></pre></td></tr></table></figure><p>根据提示使用 <code>git reset HEAD &lt;file&gt;...</code> 来取消暂存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD CONTRIBUTING.md</span><br><span class="line">Unstaged changes after reset:</span><br><span class="line">MCONTRIBUTING.md</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</span><br><span class="line"></span><br><span class="line">    renamed:    README.md -&gt; README</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">    modified:   CONTRIBUTING.md</span><br></pre></td></tr></table></figure><p>3&gt; 撤销对文件的修改</p><p>如果你并不想保留对 <code>CONTRIBUTING.md</code> 文件的修改怎么办？ 你该如何方便地撤消修改 - 将它还原成上次提交时的样子（或者刚克隆完的样子，或者刚把它放入工作目录时的样子）？ </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">    modified:   CONTRIBUTING.md</span><br></pre></td></tr></table></figure><p>根据提示使用 <code>git checkout -- &lt;file&gt;...</code> 来取消暂存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- CONTRIBUTING.md</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</span><br><span class="line"></span><br><span class="line">    renamed:    README.md -&gt; README</span><br></pre></td></tr></table></figure><p>4&gt; 删除未跟踪文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除 untracked files</span></span><br><span class="line">$ git clean -f</span><br><span class="line">  </span><br><span class="line"><span class="comment">//连 untracked 的目录也一起删除</span></span><br><span class="line">$ git clean -fd</span><br><span class="line">  </span><br><span class="line"><span class="comment">//最强删除</span></span><br><span class="line">$ git clean -xfd</span><br></pre></td></tr></table></figure><p>5&gt; 回滚</p><p>参考：<a href="https://blog.csdn.net/ligang2585116/article/details/71094887" target="_blank" rel="noopener">Git撤销&amp;回滚操作</a></p><p>我们将已被提交到“远程仓库”的代码还原操作叫做“回滚”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找到要回滚的commitID</span></span><br><span class="line">$ git log</span><br><span class="line">  </span><br><span class="line"><span class="comment">//回滚</span></span><br><span class="line">$ git revert commitID</span><br></pre></td></tr></table></figure><p>删除最后一次远程提交</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//revert的方式：放弃指定提交的修改，但是会生成一次新的提交，需要填写提交注释，以前的历史记录都在；</span></span><br><span class="line">$ git revert HEAD </span><br><span class="line">$ git push origin master</span><br><span class="line"></span><br><span class="line"><span class="comment">//reset的方式：指将HEAD指针指到指定提交，历史记录中不会出现放弃的提交记录。</span></span><br><span class="line">$ git reset --hard HEAD^</span><br><span class="line">$ git push origin master -f</span><br></pre></td></tr></table></figure><p>删除某次提交</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i commit_id</span><br><span class="line"><span class="comment">//再通过将pick改为drop</span></span><br></pre></td></tr></table></figure><p>已在本地进行了多次git commit操作，现在想撤销到其中某次Commit</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset [--soft|mixed（默认）|hard] [commit|HEAD]</span><br></pre></td></tr></table></figure><p>比如本地仓库commit一次（暂且称之为A）：只是提交一个文件（暂且称之为B）</p><ul><li>如果使用 git reset – soft  A回滚版本，A提交没有了，B文件处于未提交状态。</li><li>如果使用 git reset – mixed A回滚版本，A提交没有了，B文件处于未暂存状态。</li><li>如果使用 git reset – hard A回滚版本，A提交没有了，B文件不存在了。</li></ul><p>具体的使用参考文章—<a href="https://www.jianshu.com/p/cbd5cd504f14" target="_blank" rel="noopener">Git reset命令的使用</a></p><h2 id="三-远程仓库的使用"><a href="#三-远程仓库的使用" class="headerlink" title="三. 远程仓库的使用"></a>三. 远程仓库的使用</h2><p>前提：我在我自己的Gitlab上创建了一个空的项目。</p><h3 id="1-查看远程仓库"><a href="#1-查看远程仓库" class="headerlink" title="1. 查看远程仓库"></a>1. 查看远程仓库</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先将远程仓库克隆到本地</span></span><br><span class="line">git clone git<span class="meta">@gitlab</span>.com:xuxiaoshi/test.git</span><br></pre></td></tr></table></figure><p>①  <code>git remote</code> 命令会列出你指定的每一个远程服务器的简写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git remote</span><br><span class="line">origin</span><br></pre></td></tr></table></figure><p>如果显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL，使用下面的命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origingit<span class="meta">@gitlab</span>.com:xuxiaoshi/test.git (fetch)</span><br><span class="line">origingit<span class="meta">@gitlab</span>.com:xuxiaoshi/test.git (push)</span><br></pre></td></tr></table></figure><h3 id="2-添加远程仓库"><a href="#2-添加远程仓库" class="headerlink" title="2. 添加远程仓库"></a>2. 添加远程仓库</h3><p>添加一个新的远程 Git 仓库，同时指定一个你可以轻松引用的简写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;shortname&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure><p>给出一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add test_add https:<span class="comment">//gitlab.com/xuxiaoshi/test_add.git</span></span><br><span class="line"></span><br><span class="line">$ git remote -v</span><br><span class="line">origingit<span class="meta">@gitlab</span>.com:xuxiaoshi/test.git (fetch)</span><br><span class="line">origingit<span class="meta">@gitlab</span>.com:xuxiaoshi/test.git (push)</span><br><span class="line">test_addhttps:<span class="comment">//gitlab.com/xuxiaoshi/test_add.git (fetch)</span></span><br><span class="line">test_addhttps:<span class="comment">//gitlab.com/xuxiaoshi/test_add.git (push)</span></span><br></pre></td></tr></table></figure><h3 id="3-删除一个远程仓库以及重命名"><a href="#3-删除一个远程仓库以及重命名" class="headerlink" title="3. 删除一个远程仓库以及重命名"></a>3. 删除一个远程仓库以及重命名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除一个远程仓库</span></span><br><span class="line">git remote rm &lt;shortname&gt;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//重命名一个远程仓库</span></span><br><span class="line">git remote rename &lt;shortname&gt; &lt;new_shortname&gt;</span><br></pre></td></tr></table></figure><h2 id="四-打标签"><a href="#四-打标签" class="headerlink" title="四. 打标签"></a>四. 打标签</h2><h3 id="1-列出Tag"><a href="#1-列出Tag" class="headerlink" title="1. 列出Tag"></a>1. 列出Tag</h3><p>以字母顺序列出标签</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><h3 id="2-创建Tag"><a href="#2-创建Tag" class="headerlink" title="2. 创建Tag"></a>2. 创建Tag</h3><p>一个轻量标签很像一个不会改变的分支 - 它只是一个特定提交的引用。</p><p>附注标签是存储在 Git 数据库中的一个完整对象。 它们是可以被校验的；其中包含打标签者的名字、电子邮件地址、日期时间；还有一个标签信息；并且可以使用 GNU Privacy Guard （GPG）签名与验证。 通常建议创建附注标签，这样你可以拥有以上所有信息；但是如果你只是想用一个临时的标签，或者因为某些原因不想要保存那些信息，轻量标签也是可用的。</p><h4 id="①-轻量标签（lightweight）"><a href="#①-轻量标签（lightweight）" class="headerlink" title="① 轻量标签（lightweight）"></a>① 轻量标签（lightweight）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag &lt;name&gt;</span><br></pre></td></tr></table></figure><h4 id="②-附注标签（annotated）"><a href="#②-附注标签（annotated）" class="headerlink" title="② 附注标签（annotated）"></a>② 附注标签（annotated）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a &lt;name&gt; -m <span class="string">'信息'</span></span><br></pre></td></tr></table></figure><p><code>-m</code> 选项指定了一条将会存储在标签中的信息。 如果没有为附注标签指定一条信息，Git 会运行编辑器要求你输入信息。</p><h3 id="3-查看Tag对应的信息"><a href="#3-查看Tag对应的信息" class="headerlink" title="3.查看Tag对应的信息"></a>3.查看Tag对应的信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show &lt;tag&gt;</span><br></pre></td></tr></table></figure><h2 id="五-Git分支"><a href="#五-Git分支" class="headerlink" title="五. Git分支"></a>五. Git分支</h2><h3 id="1-分支简介"><a href="#1-分支简介" class="headerlink" title="1. 分支简介"></a>1. 分支简介</h3><p>在进行提交操作时，Git 会保存一个提交对象（commit object）。知道了 Git 保存数据的方式，我们可以很自然的想到——该提交对象会包含一个指向暂存内容快照的指针。 但不仅仅是这样，该提交对象还包含了作者的姓名和邮箱、提交时输入的信息以及指向它的父对象的指针。首次提交产生的提交对象没有父对象，普通提交操作产生的提交对象有一个父对象，而由多个分支合并产生的提交对象有多个父对象。</p><p>Git 的分支，其实本质上仅仅是指向提交对象的可变指针。 Git 的默认分支名字是 <code>master</code>。 在多次提交操作之后，你其实已经有一个指向最后那个提交对象的 <code>master</code> 分支。 它会在每次的提交操作中自动向前移动。</p><blockquote><p>Git 的 “master” 分支并不是一个特殊分支。 它就跟其它分支完全没有区别。 之所以几乎每一个仓库都有 master 分支，是因为 <code>git init</code> 命令默认创建它，并且大多数人都懒得去改动它。</p></blockquote><h3 id="2-分支的创建，删除和合并"><a href="#2-分支的创建，删除和合并" class="headerlink" title="2.分支的创建，删除和合并"></a>2.分支的创建，删除和合并</h3><h4 id="①-分支的创建"><a href="#①-分支的创建" class="headerlink" title="① 分支的创建"></a>① 分支的创建</h4><p>1&gt; Git 是怎么创建新分支的呢？ 很简单，它只是为你创建了一个可以移动的新的指针。使用下面的命令就可以创建分支了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名</span><br></pre></td></tr></table></figure><p>2&gt; Git 又是怎么知道当前在哪一个分支上呢？ 也很简单，它有一个名为 <code>HEAD</code> 的特殊指针。 请注意它和许多其它版本控制系统（如 Subversion 或 CVS）里的 <code>HEAD</code> 概念完全不同。 在 Git 中，它是一个指针，指向当前所在的本地分支。</p><h4 id="②-分支切换"><a href="#②-分支切换" class="headerlink" title="② 分支切换"></a>② 分支切换</h4><p>要切换到一个已存在的分支（实际上就是更改<code>HEAD</code> 指针的指向），你需要使用以下命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 分支名</span><br></pre></td></tr></table></figure><p>有时候也许你想在创建分支的时候就切换到创建的分支，你可以使用下面的命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b 分支名</span><br></pre></td></tr></table></figure><h4 id="③-分支删除"><a href="#③-分支删除" class="headerlink" title="③ 分支删除"></a>③ 分支删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d 分支名</span><br></pre></td></tr></table></figure><h4 id="④-分支合并"><a href="#④-分支合并" class="headerlink" title="④ 分支合并"></a>④ 分支合并</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据给的分支名更新当前分支的内容</span></span><br><span class="line">git merge 分支名</span><br></pre></td></tr></table></figure><p><img src="https://bytedance-1300729795.cos.ap-guangzhou.myqcloud.com/Git/merge.png" alt=""></p><p>1&gt; 如上图所示，如果你想将hotfix分支的内容合并到master分支</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//切换到master分支</span></span><br><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line"><span class="comment">//合并</span></span><br><span class="line">git merge hotfix</span><br></pre></td></tr></table></figure><p>合并的时候会出现<code>Fast-forward</code>，这是因为当前 <code>master</code> 分支所指向的提交是你当前提交（有关 hotfix 的提交）的直接上游，所以 Git 只是简单的将指针向前移动。换句话说，当你试图合并两个分支时，如果顺着一个分支走下去能够到达另一个分支，那么 Git 在合并两者的时候，只会简单的将指针向前推进（指针右移），因为这种情况下的合并操作没有需要解决的分歧——这就叫做 “快进（fast-forward）”。</p><p><img src="https://bytedance-1300729795.cos.ap-guangzhou.myqcloud.com/Git/merge1.png" alt="i"></p><p>2&gt; 如下图所示，如果你想将iss53分支的内容合并到master分支</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge iss53</span><br></pre></td></tr></table></figure><p><img src="https://bytedance-1300729795.cos.ap-guangzhou.myqcloud.com/Git/merge3.png" alt=""></p><p>在这种情况下，你的开发历史从一个更早的地方开始分叉开来（diverged）。 因为，<code>master</code> 分支所在提交并不是 <code>iss53</code> 分支所在提交的直接祖先，Git 不得不做一些额外的工作。 出现这种情况的时候，Git 会使用两个分支的末端所指的快照（<code>C4</code> 和 <code>C5</code>）以及这两个分支的工作祖先（<code>C2</code>），做一个简单的三方合并。</p><p><img src="https://bytedance-1300729795.cos.ap-guangzhou.myqcloud.com/Git/merge2.png" alt=""></p><p>3&gt; 上面的合并不可能一直很顺利。如果你在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，Git 就没法干净的合并它们。</p><p>你可以在合并冲突后的任意时刻使用 <code>git status</code> 命令来查看那些因包含合并冲突而处于未合并（unmerged）状态的文件。</p><p>如果你想使用图形化工具来解决冲突，你可以运行 <code>git mergetool</code>，该命令会为你启动一个合适的可视化合并工具，并带领你一步一步解决这些冲突。等你退出合并工具之后，Git 会询问刚才的合并是否成功。 如果你回答是，Git 会暂存那些文件以表明冲突已解决： 你可以再次运行 <code>git status</code> 来确认所有的合并冲突都已被解决。</p><p>如果你对结果感到满意，并且确定之前有冲突的的文件都已经暂存了，这时你可以输入 <code>git commit</code> 来完成合并提交。</p><p>下载好后，配置p4merge作为我们解决merge冲突时的可视化工具。参考文章：<a href="https://gist.github.com/tony4d/3454372" target="_blank" rel="noopener">p4merge合并问题</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global merge.tool p4mergetool</span><br><span class="line">  </span><br><span class="line">$ git config --global mergetool.p4mergetool.cmd \</span><br><span class="line"><span class="string">"/Applications/p4merge.app/Contents/Resources/launchp4merge \$PWD/\$BASE \$PWD/\$REMOTE \$PWD/\$LOCAL \$PWD/\$MERGED"</span></span><br><span class="line">  </span><br><span class="line">$ git config --global mergetool.p4mergetool.trustExitCode <span class="keyword">false</span></span><br><span class="line">  </span><br><span class="line">$ git config --global mergetool.keepBackup <span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>如果你正在合并中，你可以使用下面的命令结束合并：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge --abort</span><br></pre></td></tr></table></figure><h4 id="⑤-查看分支"><a href="#⑤-查看分支" class="headerlink" title="⑤ 查看分支"></a>⑤ 查看分支</h4><p><code>git branch</code> 命令不只是可以创建与删除分支。 如果不加任何参数运行它，会得到当前所有分支的一个列表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">  iss53</span><br><span class="line">* master</span><br></pre></td></tr></table></figure><p>注意 <code>master</code> 分支前的 <code>*</code> 字符：它代表现在检出的那一个分支（也就是说，当前 <code>HEAD</code> 指针所指向的分支）。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch -v</span></span><br><span class="line">  iss53   93b412c fix javascript issue</span><br><span class="line">* master  7a98805 Merge branch 'iss53'</span><br></pre></td></tr></table></figure><h3 id="3-远程分支"><a href="#3-远程分支" class="headerlink" title="3. 远程分支"></a>3. 远程分支</h3><p>前提：拉取Gitlab上的Test仓库到本地</p><h4 id="①关于分支"><a href="#①关于分支" class="headerlink" title="①关于分支"></a>①关于分支</h4><p>1&gt; 默认本地master分支和origin/master分支绑定在一起</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">  </span><br><span class="line">On branch master</span><br><span class="line">Your branch is up to date with <span class="string">'origin/master'</span>.</span><br><span class="line"></span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><p>创建本地分支 映射想要映射的远程分支，并切换到创建的分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b 本地分支名x origin&#x2F;远程分支名x</span><br></pre></td></tr></table></figure><p>关于映射关系可以参考这篇文章：<a href="https://blog.csdn.net/tterminator/article/details/78108550" target="_blank" rel="noopener">Git branch upstream</a></p><p>2&gt; 切换绑定的远程分支或者创建远程分支</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --set-upstream &lt;remote-name&gt; &lt;local-branch-name&gt;:&lt;remote-branch-name&gt;</span><br></pre></td></tr></table></figure><ul><li><p><code>&lt;remote-name&gt;</code>：远程git服务器名称，一般设为origin</p></li><li><p><code>&lt;local-branch-name&gt;</code>：本地分支名称</p></li><li><p><code>&lt;remote-branch-name&gt;</code>：远程分支名称</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ git push --set-upstream origin master:test</span><br><span class="line"></span><br><span class="line">remote:</span><br><span class="line">remote: INFO: Your SSH key has expired. Please generate a <span class="keyword">new</span> key.</span><br><span class="line">remote:</span><br><span class="line">Total <span class="number">0</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line">remote:</span><br><span class="line">remote: To create a merge request <span class="keyword">for</span> test, visit:</span><br><span class="line">remote:   https:<span class="comment">//gitlab.com/xuxiaoshi/test/-/merge_requests/new?merge_request%5Bsource_branch%5D=test</span></span><br><span class="line">remote:</span><br><span class="line">To gitlab.com:xuxiaoshi/test.git</span><br><span class="line"> * [<span class="keyword">new</span> branch]      master -&gt; test</span><br><span class="line">Branch <span class="string">'master'</span> set up to track remote branch <span class="string">'test'</span> from <span class="string">'origin'</span>.</span><br></pre></td></tr></table></figure><p>3&gt; 删除远程分支</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete 远程分支名</span><br></pre></td></tr></table></figure><p>例如删除刚才创建的远程分支</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin --delete test</span><br><span class="line">  </span><br><span class="line"><span class="comment">//这样子需要注意，我们本地分支是绑定远程的test分支，删除后，需要记得重新绑定</span></span><br></pre></td></tr></table></figure><p>4&gt; 查看所有的分支，包括远程分支</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -a</span><br><span class="line">  </span><br><span class="line">* master</span><br><span class="line">  remotes/origin/HEAD -&gt; origin/master</span><br><span class="line">  remotes/origin/master</span><br></pre></td></tr></table></figure><p>② 分支合并</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//推送本地分支到远程，之后需要merge request</span></span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line"><span class="comment">//拉取远程分支到本地</span></span><br><span class="line">git fetch</span><br><span class="line">  </span><br><span class="line"><span class="comment">//拉取远程分支到本地并合并</span></span><br><span class="line"><span class="function">git <span class="title">pull</span> <span class="params">(git fetch &amp; git merge)</span> </span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function"><span class="comment">//如果git pull出现冲突，放弃本地修改，使远程库内容强制覆盖本地代码</span></span></span><br><span class="line"><span class="function">git fetch --all</span></span><br><span class="line"><span class="function">git reset --hard origin/<span class="title">master</span><span class="params">(你自己绑定的远端分支)</span></span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/u014515854/article/details/80842249" target="_blank" rel="noopener">git pull时遇到error: cannot lock ref ‘xxx’: ref xxx is at （一个commitID） but expected的解决办法</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//大佬的建议</span></span><br><span class="line">git reset --hard origin/master(你自己绑定的远端分支)</span><br><span class="line">  </span><br><span class="line"><span class="comment">//参考文章的做法</span></span><br><span class="line">git update-ref -d refs/remotes/origin/feature/calidge-adapter <span class="comment">// 删除出问题的ref</span></span><br><span class="line">git pull origin feature/calidge-adapter  <span class="comment">//重新pull</span></span><br><span class="line">git reset --hard origin/feature/calidge-adapter   <span class="comment">//出现冲突，强制覆盖</span></span><br></pre></td></tr></table></figure><h3 id="4-变基"><a href="#4-变基" class="headerlink" title="4. 变基"></a>4. 变基</h3><p><img src="https://bytedance-1300729795.cos.ap-guangzhou.myqcloud.com/Git/merge3.png" alt="i"></p><p>之前介绍过，整合分支最容易的方法是 <code>merge</code> 命令。 它会把两个分支的最新快照（<code>C3</code> 和 <code>C4</code>）以及二者最近的共同祖先（<code>C2</code>）进行三方合并，合并的结果是生成一个新的快照（并提交）。</p><p>其实，还有一种方法：你可以提取在 <code>C4</code> 中引入的补丁和修改，然后在 <code>C3</code> 的基础上应用一次。 在 Git 中，这种操作就叫做 <em>变基</em>。 你可以使用 <code>rebase</code> 命令将提交到某一分支上的所有修改都移至另一分支上，就好像“重新播放”一样。</p><p>在上面这个例子中，运行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git rebase iss53</span><br></pre></td></tr></table></figure><p>它的原理是首先找到这两个分支（即当前分支 <code>experiment</code>、变基操作的目标基底分支 <code>master</code>）的最近共同祖先 <code>C2</code>，然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件，然后将当前分支指向目标基底 <code>C3</code>, 最后以此将之前另存为临时文件的修改依序应用。之后，进行一次快进合并。</p><h2 id="六-命令合集"><a href="#六-命令合集" class="headerlink" title="六. 命令合集"></a>六. 命令合集</h2><p>参考：<a href="https://blog.csdn.net/jtracydy/article/details/70402663" target="_blank" rel="noopener">git命令-远程仓库拉取、本地仓库更新、工作空间提交等等</a></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.progit.cn/#_pro_git" target="_blank" rel="noopener">Pro Git</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-起步&quot;&gt;&lt;a href=&quot;#一-起步&quot; class=&quot;headerlink&quot; title=&quot;一. 起步&quot;&gt;&lt;/a&gt;一. 起步&lt;/h2&gt;&lt;h3 id=&quot;1-Mac上安装-GIt&quot;&gt;&lt;a href=&quot;#1-Mac上安装-GIt&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="Git" scheme="http://fanandjiu.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://fanandjiu.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Android设计模式-命令模式</title>
    <link href="http://fanandjiu.com/Android%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fanandjiu.com/Android%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-07-04T10:36:19.000Z</published>
    <updated>2020-07-24T13:39:43.309Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://www.jianshu.com/p/ff909f9d925f" target="_blank" rel="noopener">Android的设计模式-命令模式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考：&lt;a href=&quot;https://www.jianshu.com/p/ff909f9d925f&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android的设计模式-命令模式&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Android琐碎知识点" scheme="http://fanandjiu.com/categories/Android%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="Android琐碎知识点" scheme="http://fanandjiu.com/tags/Android%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="Android设计模式" scheme="http://fanandjiu.com/tags/Android%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android设计模式-享元模式</title>
    <link href="http://fanandjiu.com/Android%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fanandjiu.com/Android%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-07-04T10:36:13.000Z</published>
    <updated>2020-07-24T13:40:17.518Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://www.jianshu.com/p/1dc997737dd3" target="_blank" rel="noopener">Android的设计模式-享元模式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考：&lt;a href=&quot;https://www.jianshu.com/p/1dc997737dd3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android的设计模式-享元模式&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Android琐碎知识点" scheme="http://fanandjiu.com/categories/Android%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="Android琐碎知识点" scheme="http://fanandjiu.com/tags/Android%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="Android设计模式" scheme="http://fanandjiu.com/tags/Android%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android性能优化：其它优化</title>
    <link href="http://fanandjiu.com/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%9A%E5%85%B6%E5%AE%83%E4%BC%98%E5%8C%96/"/>
    <id>http://fanandjiu.com/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%9A%E5%85%B6%E5%AE%83%E4%BC%98%E5%8C%96/</id>
    <published>2020-07-04T10:34:35.000Z</published>
    <updated>2020-07-24T13:33:46.070Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一-TraceView"><a href="#一-TraceView" class="headerlink" title="一. TraceView"></a>一. TraceView</h4><h3 id="二-Lint"><a href="#二-Lint" class="headerlink" title="二. Lint"></a>二. Lint</h3><h3 id="三-轻量容器"><a href="#三-轻量容器" class="headerlink" title="三. 轻量容器"></a>三. 轻量容器</h3><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/%20PerformanceOptimization/Other/other1.png" alt=""></p><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/%20PerformanceOptimization/Other/other2.png" alt=""></p><h3 id="四-Other"><a href="#四-Other" class="headerlink" title="四. Other"></a>四. Other</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一-TraceView&quot;&gt;&lt;a href=&quot;#一-TraceView&quot; class=&quot;headerlink&quot; title=&quot;一. TraceView&quot;&gt;&lt;/a&gt;一. TraceView&lt;/h4&gt;&lt;h3 id=&quot;二-Lint&quot;&gt;&lt;a href=&quot;#二-Lint&quot; c
      
    
    </summary>
    
    
      <category term="Android琐碎知识点" scheme="http://fanandjiu.com/categories/Android%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="Android琐碎知识点" scheme="http://fanandjiu.com/tags/Android%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="Android性能优化" scheme="http://fanandjiu.com/tags/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Android性能优化：Bitmap优化</title>
    <link href="http://fanandjiu.com/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%9ABitmap%E4%BC%98%E5%8C%96/"/>
    <id>http://fanandjiu.com/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%9ABitmap%E4%BC%98%E5%8C%96/</id>
    <published>2020-07-04T10:34:26.000Z</published>
    <updated>2020-07-24T13:28:50.146Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-Bitmap-decode"><a href="#一-Bitmap-decode" class="headerlink" title="一. Bitmap decode"></a>一. Bitmap decode</h3><p>常见的jpg，png，webp是图像的存储格式</p><p>Android要显示图片必须经过解码（decode）读取图像的数据到内存中</p><p>BitmapFactory提供了常用的一些decode方法</p><p>图片真正占用的内存要看decode之后的数据大小</p><h3 id="二-Bitmap-memory"><a href="#二-Bitmap-memory" class="headerlink" title="二. Bitmap memory"></a>二. Bitmap memory</h3><h4 id="1-lt-2-3-（API-10）"><a href="#1-lt-2-3-（API-10）" class="headerlink" title="1. &lt;= 2.3 （API 10）"></a>1. &lt;= 2.3 （API 10）</h4><ul><li>Bitmap解码之后的数据存储在Native Memory中</li><li>手动调用Recycle回收</li></ul><h4 id="2-gt-3-0（API-11）"><a href="#2-gt-3-0（API-11）" class="headerlink" title="2. &gt;= 3.0（API 11）"></a>2. &gt;= 3.0（API 11）</h4><ul><li>Bitmap解码之后的数据存储在Dalvik heap中</li><li>Dalvik自动回收</li></ul><h3 id="三-Reusing-Bitmap"><a href="#三-Reusing-Bitmap" class="headerlink" title="三. Reusing Bitmap"></a>三. Reusing Bitmap</h3><h4 id="1-复用Bitmap"><a href="#1-复用Bitmap" class="headerlink" title="1. 复用Bitmap"></a>1. 复用Bitmap</h4><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/%20PerformanceOptimization/Bitmap/bitmap_reuse1.png" alt=""></p><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/%20PerformanceOptimization/Bitmap/bitmap_reuse2.png" alt=""></p><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/%20PerformanceOptimization/Bitmap/bitmap_reuse3.png" alt=""></p><h4 id="2-Bitmap对象池"><a href="#2-Bitmap对象池" class="headerlink" title="2. Bitmap对象池"></a>2. Bitmap对象池</h4><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/%20PerformanceOptimization/Bitmap/bitmap_reuse4.png" alt=""></p><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/%20PerformanceOptimization/Bitmap/bitmap_reuse5.png" alt=""></p><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/%20PerformanceOptimization/Bitmap/bitmap_reuse6.png" alt=""></p><h4 id="3-开源工具"><a href="#3-开源工具" class="headerlink" title="3. 开源工具"></a>3. 开源工具</h4><p><a href="https://github.com/bumptech/glide" target="_blank" rel="noopener">Glide</a></p><h3 id="四-Pre-scaling-Bitmap"><a href="#四-Pre-scaling-Bitmap" class="headerlink" title="四. Pre-scaling Bitmap"></a>四. Pre-scaling Bitmap</h3><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/%20PerformanceOptimization/Bitmap/bitmap_scale1.png" alt=""></p><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/%20PerformanceOptimization/Bitmap/bitmap_scale2.png" alt=""></p><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/%20PerformanceOptimization/Bitmap/bitmap_scale3.png" alt=""></p><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/%20PerformanceOptimization/Bitmap/bitmap_scale4.png" alt=""></p><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/%20PerformanceOptimization/Bitmap/bitmap_scale5.png" alt=""></p><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/%20PerformanceOptimization/Bitmap/bitmap_scale6.png" alt=""></p><h3 id="五-Smaller-Pixel-Format"><a href="#五-Smaller-Pixel-Format" class="headerlink" title="五. Smaller Pixel Format"></a>五. Smaller Pixel Format</h3><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/%20PerformanceOptimization/Bitmap/bitmap_format1.png" alt=""></p><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/%20PerformanceOptimization/Bitmap/bitmap_format2.png" alt=""></p><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/%20PerformanceOptimization/Bitmap/bitmap_format3.png" alt=""></p><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/%20PerformanceOptimization/Bitmap/bitmap_format4.png" alt=""></p><h3 id="六-LRU-cache"><a href="#六-LRU-cache" class="headerlink" title="六. LRU cache"></a>六. LRU cache</h3><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/%20PerformanceOptimization/Bitmap/bitmap_lru1.png" alt=""></p><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/%20PerformanceOptimization/Bitmap/bitmap_lru2.png" alt=""></p><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/%20PerformanceOptimization/Bitmap/bitmap_lru3.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-Bitmap-decode&quot;&gt;&lt;a href=&quot;#一-Bitmap-decode&quot; class=&quot;headerlink&quot; title=&quot;一. Bitmap decode&quot;&gt;&lt;/a&gt;一. Bitmap decode&lt;/h3&gt;&lt;p&gt;常见的jpg，png，webp是
      
    
    </summary>
    
    
      <category term="Android琐碎知识点" scheme="http://fanandjiu.com/categories/Android%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="Android琐碎知识点" scheme="http://fanandjiu.com/tags/Android%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="Android性能优化" scheme="http://fanandjiu.com/tags/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Android性能优化：电量优化</title>
    <link href="http://fanandjiu.com/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%9A%E7%94%B5%E9%87%8F%E4%BC%98%E5%8C%96/"/>
    <id>http://fanandjiu.com/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%9A%E7%94%B5%E9%87%8F%E4%BC%98%E5%8C%96/</id>
    <published>2020-07-04T10:34:17.000Z</published>
    <updated>2020-07-07T06:21:45.935Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-前言"><a href="#一-前言" class="headerlink" title="一. 前言"></a>一. 前言</h3><p>​       耗电情况，例如：打开屏幕，所有要使用CPU/GPU工作的动作都会唤醒屏幕，都会消耗电量。这和应用程序唤醒设备还不一样。比如使用叫醒闹钟(wake clock)、AlarmManager、JobSchedulerAPI。</p><h3 id="二-电量消耗情景"><a href="#二-电量消耗情景" class="headerlink" title="二. 电量消耗情景"></a>二. 电量消耗情景</h3><h4 id="1-移动网络请求"><a href="#1-移动网络请求" class="headerlink" title="1. 移动网络请求"></a>1. 移动网络请求</h4><p>当设备通过无线网发送数据的时候，为了使用硬件，这里会出现一个唤醒耗电高峰。接下来还 有一个高数值，这是发送数据包消耗的电量，然后接受数据包也会消耗大量电量 也看到一个峰值。</p><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/%20PerformanceOptimization/dian/dian.png" alt=""></p><h4 id="2-WakeLock"><a href="#2-WakeLock" class="headerlink" title="2. WakeLock"></a>2. WakeLock</h4><p>Android 系统本身为了优化电量的使用，会在没有操作时进入休眠状态，来节省电量。当然，为了便于开发(很多应用不可避免的希望在灭屏后还能运行一些事儿，或是要保持屏幕一直亮着–比如播放视频)，Android 提供了一个 PowerManager.WakeLock 的东西。</p><p>我们可以用 WakeLock 来保持 CPU 运行，或是防止屏幕变暗/关闭，让手机可以在用户不操作时依然可以做一些事儿。然而，获取 WakeLock 很容易，释放不好就会成为难题，消耗电量。例如获取了一个 WakeLock 来保持 CPU 运转，做一个复杂运算并将数据上传到后台服务器，然后释放该 WakeLock。然而这个过程可能并不像我们想象的那么快，可能因为比如服务器挂掉，计算出了异常等等导致 WakeLock 没有释放，CPU 会一直得不到休眠，而大大增加耗电。</p><h4 id="3-GPS"><a href="#3-GPS" class="headerlink" title="3. GPS"></a>3. GPS</h4><p>应用中经常会用到定位服务，Android 提供了 Network 定位和 GPS 定位。相对来说，GPS 会精确得多，对于一些诸如跑步，导航类的应用基本会使用 GPS 定位。然而，GPS 定位也会消耗大量的电量。</p><h3 id="二-电量分析工具"><a href="#二-电量分析工具" class="headerlink" title="二. 电量分析工具"></a>二. 电量分析工具</h3><h4 id="Battery-History-工具"><a href="#Battery-History-工具" class="headerlink" title="Battery History 工具"></a>Battery History 工具</h4><p>要进行电量优化，我们首先得知道电都消耗到哪里去了，我们可以通过 google 开源的 Battery-Historian 来进行分析。</p><p>工具开源地址: <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fgoogle%2Fbattery-historian" target="_blank" rel="noopener">https://github.com/google/battery-historian</a></p><h3 id="三-优化措施"><a href="#三-优化措施" class="headerlink" title="三. 优化措施"></a>三. 优化措施</h3><h4 id="1-优化网络请求"><a href="#1-优化网络请求" class="headerlink" title="1. 优化网络请求"></a>1. 优化网络请求</h4><p>在蜂窝移动网络下，最好做到批量执行网络请求，尽量避免频繁的间隔网络请求。</p><p>尽量在 Wi-Fi 环境下使用数据传输。</p><h4 id="2-谨慎使用WakeLock"><a href="#2-谨慎使用WakeLock" class="headerlink" title="2. 谨慎使用WakeLock"></a>2. 谨慎使用WakeLock</h4><p>WakeLock 获取释放成对出现（调用 release），使用超时 WakeLock，以防出异常导致没有释放。</p><p>WakeLock 有一个接口 setReferenceCounted，用来设置 WakeLock 的计数机制，true 为计数，false 为不计数，默认是 true。所谓计数即每一个 acquire 必须对应一个 release；不计数则是无论有多少个 acquire，一个 release 就可以释放。虽然官方说默认 是计数的，但有的第三方 ROM 做了修改，使默认是不计数的。</p><p>主动设置 <code>wakeLock.setReferenceCounted(false)</code>。</p><h4 id="3-监听手机充电状态"><a href="#3-监听手机充电状态" class="headerlink" title="3. 监听手机充电状态"></a>3. 监听手机充电状态</h4><p>BatteryManager 会发送一个包含充电状态的持续广播，我们可以通过此广播获取充电状态和电量详情。因为这是一个持续广播，无需写 Receiver，可以直接通过 intent 获取相关数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">IntentFilter ifilter = <span class="keyword">new</span> IntentFilter(Intent.ACTION_BATTERY_CHANGED);</span><br><span class="line">Intent batteryStatus = context.registerReceiver(<span class="keyword">null</span>，ifilter);</span><br><span class="line"><span class="comment">// 设备正在充电</span></span><br><span class="line"><span class="keyword">int</span> status = batteryStatus.getIntExtra(BatteryManager.EXTRA_STATUS，-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">boolean</span> isCharging = status == BatteryManager.BATTERY_STATUS_CHARGING ||</span><br><span class="line">                 status == BatteryManager.BATTERY_STATUS_FULL;</span><br><span class="line"><span class="comment">// 也可以监听充电状态的变化，只要设备连接或断开电源，BatteryManager 就会广播相应的操作</span></span><br><span class="line"><span class="keyword">int</span> chargePlug = batteryStatus.getIntExtra(BatteryManager.EXTRA_PLUGGED，-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">boolean</span> usbCharge = chargePlug == BATTERY_PLUGGED_USB;</span><br><span class="line"><span class="keyword">boolean</span> acCharge = chargePlug == BATTERY_PLUGGED_AC;</span><br></pre></td></tr></table></figure><p>另外页可以注册 Receiver来监听</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".PowerConnectionReceiver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.ACTION_POWER_CONNECTED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.ACTION_POWER_DISCONNECTED"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-Doze-and-App-Standby"><a href="#4-Doze-and-App-Standby" class="headerlink" title="4. Doze and App Standby"></a>4. Doze and App Standby</h4><p>Android 6.0 提供了两个用来节省电量的技术 Doze 和 App Standby。</p><ul><li>Doze 瞌睡。如果设备闲置了一段较长时间，Doze 技术将通过延迟后台网络活动，CPU 运行等来减少电量损耗。</li><li>App Standy 应用待机。不是最近得到过用户使用的 App，App Standy 将延缓这个应用的后台网络活动。</li></ul><p>所有 Android 6.0 及以上的设备上，Doze and App Standby 都会运行。可能会影响 App 的运行，可以根据官方文档适配。</p><p>可以在代码中调起电量优化的设计页面，让用户选择是否将应用加入白名单，以在 Doze 模式下能够做一些事情。</p><h4 id="5-定位中使用-GPS，及时关闭"><a href="#5-定位中使用-GPS，及时关闭" class="headerlink" title="5. 定位中使用 GPS，及时关闭"></a>5. 定位中使用 GPS，及时关闭</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Remove the listener you previously added</span></span><br><span class="line">locationManager.removeUpdates(locationListener);</span><br></pre></td></tr></table></figure><h4 id="6-计算优化"><a href="#6-计算优化" class="headerlink" title="6. 计算优化"></a>6. 计算优化</h4><p>缩短代码产生指令运行的时间，进而减少某个应用程序对 CPU 时间片 的总占用时间，进而减少单位时间内该应用程序占整个系统耗电的百分比。</p><p>浮点运算比整数运算更消耗 CPU 时间片，因此耗电也会增加，在编写 代码的过程中应该尽量减少浮点运算。</p><ul><li>除法变乘法。</li><li>充分利用移位。</li><li>查表法，直接使用映射关系，但这会增加内存占用，视情况而定。</li></ul><h4 id="7-其他"><a href="#7-其他" class="headerlink" title="7. 其他"></a>7. 其他</h4><p>熄屏后停止一些和 UI 效果有关的操作，比如动画。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><strong><a href="https://www.jianshu.com/p/627554db9f60" target="_blank" rel="noopener">Android 优化——电量优化</a></strong></p><p><strong><a href="https://www.jianshu.com/p/c86021fe958d" target="_blank" rel="noopener">Android电量优化全解析</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-前言&quot;&gt;&lt;a href=&quot;#一-前言&quot; class=&quot;headerlink&quot; title=&quot;一. 前言&quot;&gt;&lt;/a&gt;一. 前言&lt;/h3&gt;&lt;p&gt;​       耗电情况，例如：打开屏幕，所有要使用CPU/GPU工作的动作都会唤醒屏幕，都会消耗电量。这和应用程序唤醒
      
    
    </summary>
    
    
      <category term="Android琐碎知识点" scheme="http://fanandjiu.com/categories/Android%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="Android琐碎知识点" scheme="http://fanandjiu.com/tags/Android%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="Android性能优化" scheme="http://fanandjiu.com/tags/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Android性能优化：布局优化</title>
    <link href="http://fanandjiu.com/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%9A%E5%B8%83%E5%B1%80%E4%BC%98%E5%8C%96/"/>
    <id>http://fanandjiu.com/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%9A%E5%B8%83%E5%B1%80%E4%BC%98%E5%8C%96/</id>
    <published>2020-07-04T10:34:07.000Z</published>
    <updated>2020-07-06T02:51:19.817Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-过度绘制"><a href="#一-过度绘制" class="headerlink" title="一. 过度绘制"></a>一. 过度绘制</h3><h4 id="1-什么是过度绘制"><a href="#1-什么是过度绘制" class="headerlink" title="1. 什么是过度绘制"></a>1. 什么是过度绘制</h4><p>一个像素绘制超过一次。</p><h4 id="2-追踪过度绘制"><a href="#2-追踪过度绘制" class="headerlink" title="2. 追踪过度绘制"></a>2. 追踪过度绘制</h4><p>Android手机的开发者模式有一个Show GPU Overdraw工具。</p><ul><li>蓝色：1×过度绘制。</li><li>绿色：2×过度绘制。</li><li>浅红色：3×过度绘制。</li><li>深红色：4×过度绘制。</li></ul><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/%20PerformanceOptimization/UI/overdraw_find.png" alt=""></p><h4 id="3-优化过度绘制"><a href="#3-优化过度绘制" class="headerlink" title="3. 优化过度绘制"></a>3. 优化过度绘制</h4><p>降低View层级：</p><ul><li>LinearLayout VS RelativeLayout</li><li>merge</li></ul><p>不必要的背景：</p><ul><li>去掉window的背景</li><li>去掉布局中不必要的背景。</li></ul><p>ClipRect &amp; QuickReject</p><p>ViewStub</p><p>.9图用作背景</p><h3 id="二-UI卡顿"><a href="#二-UI卡顿" class="headerlink" title="二.UI卡顿"></a>二.UI卡顿</h3><h4 id="1-帧率"><a href="#1-帧率" class="headerlink" title="1.帧率"></a>1.帧率</h4><p>Frame Rate，单位fps，是指GPU生成帧的速率，越高越好。</p><h4 id="2-屏幕刷新率"><a href="#2-屏幕刷新率" class="headerlink" title="2. 屏幕刷新率"></a>2. 屏幕刷新率</h4><p>Refresh Rate，单位HZ，是指设备刷新屏幕的频率，对于特定设备来说是个常量，如60HZ。</p><h4 id="3-VSync的作用"><a href="#3-VSync的作用" class="headerlink" title="3. VSync的作用"></a>3. VSync的作用</h4><p>① 没有引入VSync时，屏幕显示图像的工作流程。</p><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/%20PerformanceOptimization/UI/vsync_1.png" alt=""></p><p>如上图，CPU/GPU 向 Buffer 中生成图像，屏幕从 Buffer 中取图像、刷新后显示。这是一个典型的生产者——消费者模型。<br>理想的情况是帧率和刷新频率相等，每绘制一帧，屏幕显示一帧。而实际情况是，二者之间没有必然的大小关系，如果没有锁来控制同步，很容易出现问题。例如，当帧率大于刷新频率，当屏幕还没有刷新第 n-1 帧的时候，GPU 已经在生成第 n 帧了，从上往下开始覆盖第 n-1 帧的数据，当屏幕开始刷新第 n-1 帧的时候，Buffer 中的数据上半部分是第 n 帧数据，而下半部分是第 n-1 帧的数据，显示出来的图像就会出现上半部分和下半部分明显偏差的现象，我们称之为 “tearing”。</p><p>② 双重缓存</p><p>为了解决单缓存的“tearing”问题，双重缓存和 VSync 应运而生。</p><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/%20PerformanceOptimization/UI/vsync_2.png" alt=""></p><p>工作流程这样的：<br>在某个时间点，一个屏幕刷新周期完成，进入短暂的刷新空白期。此时，VSync 信号产生，先完成复制操作，然后通知 CPU/GPU 绘制下一帧图像。复制操作完成后屏幕开始下一个刷新周期，即将刚复制到 Frame Buffer 的数据显示到屏幕上。</p><p>在这种模型下，只有当 VSync 信号产生时，CPU/GPU 才会开始绘制。这样，当帧率大于刷新频率时，帧率就会被迫跟刷新频率保持同步，从而避免“tearing”现象。</p><p>③ 三重缓存</p><p>略</p><h4 id="4-避免UI卡顿"><a href="#4-避免UI卡顿" class="headerlink" title="4.  避免UI卡顿"></a>4.  避免UI卡顿</h4><ul><li>避免onDraw中创建对象，对象池。</li><li>减少View层级</li><li>避免在UI顶层使用ReleativeLayout，measure两次</li><li>自定义View控制绘制的复杂度</li></ul><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://blog.csdn.net/zhaizu/article/details/51882768#%E5%B8%A7%E7%8E%87-vs-%E5%B1%8F%E5%B9%95%E5%88%B7%E6%96%B0%E9%A2%91%E7%8E%87" target="_blank" rel="noopener">理解 VSync</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-过度绘制&quot;&gt;&lt;a href=&quot;#一-过度绘制&quot; class=&quot;headerlink&quot; title=&quot;一. 过度绘制&quot;&gt;&lt;/a&gt;一. 过度绘制&lt;/h3&gt;&lt;h4 id=&quot;1-什么是过度绘制&quot;&gt;&lt;a href=&quot;#1-什么是过度绘制&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="Android琐碎知识点" scheme="http://fanandjiu.com/categories/Android%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="Android琐碎知识点" scheme="http://fanandjiu.com/tags/Android%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="Android性能优化" scheme="http://fanandjiu.com/tags/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>字节跳动Android实习生面试</title>
    <link href="http://fanandjiu.com/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8Android%E5%AE%9E%E4%B9%A0%E7%94%9F%E9%9D%A2%E8%AF%95/"/>
    <id>http://fanandjiu.com/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8Android%E5%AE%9E%E4%B9%A0%E7%94%9F%E9%9D%A2%E8%AF%95/</id>
    <published>2020-07-04T09:42:43.000Z</published>
    <updated>2020-07-04T10:38:09.836Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简单的介绍"><a href="#简单的介绍" class="headerlink" title="简单的介绍"></a>简单的介绍</h3><p>本人末流211计算机专业大三本科生，于2020年6月20日在字节跳动的官网上投递了广州的Android开发实习生。</p><p>字节跳动的面试官真的很nice，特别有耐心。</p><h3 id="一面（6月24日-104min）"><a href="#一面（6月24日-104min）" class="headerlink" title="一面（6月24日 104min）"></a>一面（6月24日 104min）</h3><ul><li><p>自我介绍。</p></li><li><p>线程和进程的区别。</p></li><li><p>线程安全。我回答了sychronized关键字（关于锁，wait，notify参考我的一篇博客—<a href="https://www.jianshu.com/p/76c6b75efcc5" target="_blank" rel="noopener">Java 多线程</a>）。面试官追问是否了解volite关键字，我忘了没回答出来。面试官追问是否了解自旋锁，乐观锁，悲观锁等，我回答了解但是没用过。</p></li><li><p>http是用什么实现的。</p></li><li><p>TCP和UDP的区别。</p></li><li><p>TCP为什么是可靠的。注意拥塞机制涉及的算法（慢开始，拥塞避难，快重传，快恢复）。</p></li><li><p>Get请求和Post请求的区别。注意Get请求比Post请求效率高，Post请求需要服务器返回100再发送数据处理，Get请求直接是通过URL。面试官追问是否知道其他请求方式，Put，Delete，Head。</p></li><li><p>项目中询问一个 A Activity 跳到一个 B Activity中，生命周期的走动，点击Back返回呢。如果一个 A Activity是透明的呢？如果 B Activity是一个Dialog呢？面试官追问横竖屏切换生命周期走动，以及是否了解onConfigurationChanged。</p></li><li><p>HashMap的源码，扩容的条件。</p></li><li><p>算法两道，一道是和并两个有序链表，我用的归并排序合并过程的思路写的（长时间用IDE，好多错误，但是面试官很有耐心帮我纠错）。一道是思路，将一段文本中的单词逆序输出，主要考察数据结构的知识，用到了栈和队列。</p></li><li><p>询问我的基本情况，实习时间等。</p></li><li><p>反问环节：其实没问，面试官建议我对常见的知识做深一步的理解，多看源码，多用记事本写代码，多看看基本的数据结构和算法。</p></li></ul><h3 id="二面（7月1日-57min）"><a href="#二面（7月1日-57min）" class="headerlink" title="二面（7月1日 57min）"></a>二面（7月1日 57min）</h3><ul><li>自我介绍。</li><li>说说自己的亮点，我说了写博客。</li><li>Android静态库和动态库的区别。</li><li>Android中Binder机制。</li><li>Android进程间的通信。</li><li>说说自旋锁，内部实现。</li><li>问了线程同步，我又说了sychroized，还是参考那篇博客。</li><li>设计模式六大原则，给出具体情况，应该怎么做。</li><li>是否了解Java的atomic，以及好多很底层的东西，记不清了，大部分都没有回答出来。</li><li>算法题：求解矩形起点到终点的最短路径，只能向右或者向下走，这是一道简单的动态规划题。</li><li>询问我的基本情况，实习时间等。</li><li>反问环节：询问自己想要加入还需要提升那部分的知识，面试官建议多参加实际的项目。</li></ul><h3 id="三面（7月3日-40min）"><a href="#三面（7月3日-40min）" class="headerlink" title="三面（7月3日 40min）"></a>三面（7月3日 40min）</h3><ul><li><p>自我介绍。</p></li><li><p>项目中出现的难处以及解决。我说的是我使用addView达到弹出框的效果，但是耗时长。后来了解Fragment，使用Fragment代替addView。面试官追问你能分析为什么这么慢吗，我就说了Android的Activity-&gt;PhoneWindow-&gt;DecorView-&gt;ContentView-&gt;WindowManager-&gt;RootViewImpl的绘制流程。面试官继续追问ANR出现的类型，原因以及排查的方式。面试官继续追问Fragment和Activity的区别以及Fragment的优点。</p></li><li><p>说一下Android中多线程使用方式。面试官追问如何停止一个线程。</p></li><li><p>Handler的原理。Looper，MessageQueue，Message。面试官追问在一个Handler中给另一个Handler发送消息，我没太理解其实。</p></li><li><p>Java内存，回收的搜索算法：引用计数和根搜索算法。</p></li><li><p>算法题：将一个32位的int型整数逆序，我用的取整加取余获取每一位保存在链表中，然后反转链表。</p></li><li><p>询问我的基本情况，实习时间，职业规划等。</p></li></ul><h3 id="Hr面（7月3日-20min）"><a href="#Hr面（7月3日-20min）" class="headerlink" title="Hr面（7月3日 20min）"></a>Hr面（7月3日 20min）</h3><ul><li><p>自我介绍。</p></li><li><p>询问我的基本情况，实习时间，职业规划等。</p></li><li><p>给了口头Offer。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简单的介绍&quot;&gt;&lt;a href=&quot;#简单的介绍&quot; class=&quot;headerlink&quot; title=&quot;简单的介绍&quot;&gt;&lt;/a&gt;简单的介绍&lt;/h3&gt;&lt;p&gt;本人末流211计算机专业大三本科生，于2020年6月20日在字节跳动的官网上投递了广州的Android开发实习生。&lt;
      
    
    </summary>
    
    
    
      <category term="字节跳动" scheme="http://fanandjiu.com/tags/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>Android性能优化：内存优化</title>
    <link href="http://fanandjiu.com/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%9A%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/"/>
    <id>http://fanandjiu.com/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%9A%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/</id>
    <published>2020-06-22T02:34:49.000Z</published>
    <updated>2020-06-22T15:53:00.764Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-垃圾回收机制"><a href="#一-垃圾回收机制" class="headerlink" title="一. 垃圾回收机制"></a>一. 垃圾回收机制</h3><h4 id="1-什么是垃圾回收机制"><a href="#1-什么是垃圾回收机制" class="headerlink" title="1. 什么是垃圾回收机制"></a>1. 什么是垃圾回收机制</h4><p>自动内存管理和回收机制。垃圾回收器负责回收程序中已经不使用，但是仍然被各种对象占用的内存。</p><p>优点：将程序员从繁重，危险的内存管理工作中解放出来。</p><p>缺点：可能会占用大量资源。</p><h4 id="2-Android中的垃圾回收机制"><a href="#2-Android中的垃圾回收机制" class="headerlink" title="2. Android中的垃圾回收机制"></a>2. Android中的垃圾回收机制</h4><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/%20PerformanceOptimization/memory/laji_show.png" alt=""></p><p><strong>Young Generation</strong></p><ul><li>大多数新建的对象都位于Eden区。</li><li>当EDen区被对象填满时，就会执行Minor GC。并把所有存活下来的对象转移到一个survivor区。</li><li>Survivor Space：S0，S1有两个，存放每次垃圾回收后存活的对象。</li><li>MInor GC同样会检查survivor区中存活下来的对象，并把它们转移到另一个survivor区。这样在一段时间内，总会有一个空的survivor区。</li></ul><p><strong>Old Generation</strong></p><ul><li>存放长期存活的对象和经过多次MInor GC后依然存活下来的对象。</li><li>满了进行Major GC。</li></ul><p><strong>Permanent Generation</strong></p><ul><li>存放方法区，方法区中有要加载的类信息，静态变量，final类型的常量，属性和方法信息。</li></ul><h4 id="3-垃圾回收机制-amp-FPS"><a href="#3-垃圾回收机制-amp-FPS" class="headerlink" title="3. 垃圾回收机制 &amp; FPS"></a>3. 垃圾回收机制 &amp; FPS</h4><ul><li>Android系统每隔16ms发出VSYNC信号，触发对UI进行渲染，那么整个过程如果保证在16ms以内就能达到一个流畅的画面。60FPS</li><li>如果某一帧的操作超过了16ms就会让用户感觉到卡顿。</li><li>UI渲染过程发生GC，导致某一帧绘制时间超过16ms。</li></ul><h3 id="二-内存泄漏"><a href="#二-内存泄漏" class="headerlink" title="二. 内存泄漏"></a>二. 内存泄漏</h3><p>在整个Android开发过程中，内存泄漏是导致OOM（Out Of Memory内存溢出）的一个重要因素。</p><p>当出现以下情况就会发生卡顿。</p><ul><li>应用程序分配了大量不能回收的对象。</li><li>这导致可分配的内存越来越少。</li><li>当新对象的创建需要的内存不够。</li><li>当发现内存不够就会调用一次GC进行垃圾回收。</li></ul><h3 id="三-内存抖动"><a href="#三-内存抖动" class="headerlink" title="三. 内存抖动"></a>三. 内存抖动</h3><p>原因：内存抖动是因为应用程序在短时间内创建大量的对象，又被马上释放。</p><ul><li>瞬间产生大量的对象会严重占用Young Generation的内存区域。</li><li>当达到阈值，剩余空间不够，就会触发GC从而导致刚产生的对象又很快被回收。</li><li>即时每次分配的对象占用了很少的内存，频分GC叠加在一起会增加Heap的压力从而触发更多其他类型的GC。</li></ul><p>结果：这个操作有可能会影响到帧率，并使用户感知到性能问题。</p><h3 id="四-内存检测工具"><a href="#四-内存检测工具" class="headerlink" title="四. 内存检测工具"></a>四. 内存检测工具</h3><h4 id="1-Memeory-Profiler-内存监视器"><a href="#1-Memeory-Profiler-内存监视器" class="headerlink" title="1.Memeory Profiler 内存监视器"></a>1.Memeory Profiler 内存监视器</h4><p>Memeory Profiler是Android Profiler是Android Studio3.0用来替换之前Android Monitor(Allocation Tracker，Heap Viewer)的观察工具，主要用来观察内存，网络，cpu温度。</p><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/%20PerformanceOptimization/memory/profiler_show.png" alt=""></p><p>Memoey Profiler的使用参考：<a href="https://developer.android.google.cn/studio/profile/memory-profiler.html" target="_blank" rel="noopener">官方文档</a></p><h4 id="2-Leak-Canary"><a href="#2-Leak-Canary" class="headerlink" title="2. Leak Canary"></a>2. Leak Canary</h4><p><a href="https://github.com/square/leakcanary" target="_blank" rel="noopener">官方地址</a>，Leak Canary是Square公司基于MAT开源的一个工具，用来检测Android App中的内存泄露问题。</p><p>使用参考文档：<a href="https://www.jianshu.com/p/b83ddffcb3b5" target="_blank" rel="noopener">LeakCanary</a></p><h3 id="五-常见的内存泄漏问题"><a href="#五-常见的内存泄漏问题" class="headerlink" title="五.常见的内存泄漏问题"></a>五.常见的内存泄漏问题</h3><h4 id="1-单例造成的泄漏"><a href="#1-单例造成的泄漏" class="headerlink" title="1. 单例造成的泄漏"></a>1. 单例造成的泄漏</h4><p>将Context对象保存在单例模式中，instance对象本身持有一个Context对象的引用，活动即时被销毁也不能被回收，因为静态变量一直持有它的引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AppManager instance;</span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">AppManager</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AppManager <span class="title">getInstance</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> AppManager(context);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AppManager instance;</span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">AppManager</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//    使用Application的Context（也可以用自定义的Application）</span></span><br><span class="line">        <span class="keyword">this</span>.context = context.getApplicationContext();        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AppManager <span class="title">getInstance</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> AppManager(context);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-非静态内部类的静态实例造成的泄漏"><a href="#2-非静态内部类的静态实例造成的泄漏" class="headerlink" title="2. 非静态内部类的静态实例造成的泄漏"></a>2. 非静态内部类的静态实例造成的泄漏</h4><p>静态的sResource在创建时会间接持有一个MainActivity实例的引用，导致MainActivity无法被回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TestResource sResource = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> （sResource == <span class="keyword">null</span>) &#123;</span><br><span class="line">            sResource = <span class="keyword">new</span> TestResource();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非静态内部类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestResource</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line">将该内部类设为静态内部类或将该内部类抽取出来封装成一个单例</span><br><span class="line"></span><br><span class="line">如果用到Context就使用Application的Context</span><br><span class="line"></span><br><span class="line">但是Dialog不能使用Application和Service的Context</span><br></pre></td></tr></table></figure><h4 id="3-Handler-造成的内存泄漏问题"><a href="#3-Handler-造成的内存泄漏问题" class="headerlink" title="3. Handler 造成的内存泄漏问题"></a>3. Handler 造成的内存泄漏问题</h4><p>当创建匿名对象时，该对象会间接持有外部类实例的一个引用，mHandler对象本身会持有MainActivity的引用，导致MainActivity销毁后无法即时被回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        loadData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...request</span></span><br><span class="line">        Message message = Message.obtain();</span><br><span class="line">        mHandler.sendMessage(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Activity中避免使用非静态内部类，比如将Handler声明为静态的，这样Handler的存活时间就与Activity无关了</p><p>同时引入弱引用的方式引入Activity，避免将Activity作为Context传入</p><p>使用前判空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> WeakReference mActivity;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">MyHandler</span><span class="params">(MainActivity activity)</span></span>&#123;</span><br><span class="line">            mActivity = <span class="keyword">new</span> WeakReference(activity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        loadData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...request</span></span><br><span class="line">        Message message = Message.obtain();</span><br><span class="line">        mHandler.sendMessage(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-集合类泄漏"><a href="#4-集合类泄漏" class="headerlink" title="4. 集合类泄漏"></a>4. 集合类泄漏</h4><ul><li>如果集合类是全局的变量（类中的静态属性，全局性的map等既有静态引用或final一直指向它）</li><li>没有相应的删除机制</li><li>很可能导致集合所占用的内存只增不减</li></ul><h3 id="六-避免内存泄漏的方法"><a href="#六-避免内存泄漏的方法" class="headerlink" title="六. 避免内存泄漏的方法"></a>六. 避免内存泄漏的方法</h3><ol><li>尽量不要让静态变量引用Activity</li><li>使用WeakReference弱引用，会保证GC时会被回收</li><li>使用静态内部类来代替内部类，静态内部类不持有外部类的引用</li><li>静态内部类使用弱引用来引用外部类</li><li>在声明周期结束的时候释放资源</li></ol><h3 id="七-减少内存使用"><a href="#七-减少内存使用" class="headerlink" title="七. 减少内存使用"></a>七. 减少内存使用</h3><ol><li>使用更轻量的数据结构（SpareArray代替HashMap）</li><li>避免在onDraw方法中创建对象<ul><li>onDraw()方法被频繁调用，在其中创建对象会导致临时对象过多，发生内存抖动</li></ul></li><li>对象池（Message.obtain()）<ul><li>当一定要在onDraw中创建对象，推荐使用对象池</li><li>相当于对象缓冲，在创建时查找是否已经存在对象，没有在创建</li></ul></li><li>LRUCache</li><li>Bitmap内存复用，压缩（inSampleSize,inBitmap）</li><li>StringBuilder</li></ol><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://juejin.im/entry/581b30caa0bb9f00589a3623" target="_blank" rel="noopener">Android 内存管理</a></p><hr><p>暂停跟新一段时间，找到工作后后续内容：</p><p>Android性能优化-布局优化</p><p>Android性能优化-电量优化</p><p>Android性能优化-网络优化</p><p>Android性能优化-Bitmap优化</p><p>Android性能优化-其他优化</p><p>设计模式：</p><p><a href="https://www.jianshu.com/p/1dc997737dd3" target="_blank" rel="noopener">Android的设计模式-享元模式</a></p><p><a href="https://www.jianshu.com/p/ff909f9d925f" target="_blank" rel="noopener">Android的设计模式-命令模式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-垃圾回收机制&quot;&gt;&lt;a href=&quot;#一-垃圾回收机制&quot; class=&quot;headerlink&quot; title=&quot;一. 垃圾回收机制&quot;&gt;&lt;/a&gt;一. 垃圾回收机制&lt;/h3&gt;&lt;h4 id=&quot;1-什么是垃圾回收机制&quot;&gt;&lt;a href=&quot;#1-什么是垃圾回收机制&quot; cla
      
    
    </summary>
    
    
      <category term="Android琐碎知识点" scheme="http://fanandjiu.com/categories/Android%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="Android琐碎知识点" scheme="http://fanandjiu.com/tags/Android%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="Android性能优化" scheme="http://fanandjiu.com/tags/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Android项目15：驾考宝典</title>
    <link href="http://fanandjiu.com/Android%E9%A1%B9%E7%9B%AE15%EF%BC%9A%E9%A9%BE%E8%80%83%E5%AE%9D%E5%85%B8/"/>
    <id>http://fanandjiu.com/Android%E9%A1%B9%E7%9B%AE15%EF%BC%9A%E9%A9%BE%E8%80%83%E5%AE%9D%E5%85%B8/</id>
    <published>2020-06-20T16:02:23.000Z</published>
    <updated>2020-06-20T16:13:10.783Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-运行效果以及源码"><a href="#一-运行效果以及源码" class="headerlink" title="一. 运行效果以及源码"></a>一. 运行效果以及源码</h3><h4 id="1-gif图效果"><a href="#1-gif图效果" class="headerlink" title="1.gif图效果"></a>1.gif图效果</h4><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/DriveQuestion/DriveQuestion.gif" alt=""></p><h4 id="2-源码地址"><a href="#2-源码地址" class="headerlink" title="2.源码地址"></a>2.源码地址</h4><p><a href="https://github.com/xiaoshitounen/DriveQuestion" target="_blank" rel="noopener">DriveQuestion</a></p><h3 id="二-主要的思路"><a href="#二-主要的思路" class="headerlink" title="二.主要的思路"></a>二.主要的思路</h3><p>使用OKHttp+Gson将服务器端的数据显示到ViewPager上。</p><p>数据来自：<a href="https://www.avatardata.cn/Docs/Api/1ccd64af-d0d9-4ddd-8bac-660344cf2f21" target="_blank" rel="noopener">阿凡达数据-驾照题库</a></p><h3 id="三-使用到的技术点"><a href="#三-使用到的技术点" class="headerlink" title="三.使用到的技术点"></a>三.使用到的技术点</h3><p><a href="https://fanandjiu.com/Android控件-ViewPager/">Android控件-ViewPager/</a></p><p><a href="https://fanandjiu.com/Android网络-OkHttp基本使用/">Android网络-OkHttp基本使用</a></p><p><a href="https://fanandjiu.com/Android网络-解析Json数据/">Android网络-解析Json数据</a></p><h3 id="四-对应论文"><a href="#四-对应论文" class="headerlink" title="四. 对应论文"></a>四. 对应论文</h3><p>链接:<a href="https://pan.baidu.com/s/1MmuDzC0K1B5Ph4HQc4kcWQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1MmuDzC0K1B5Ph4HQc4kcWQ</a>  密码:t5id</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-运行效果以及源码&quot;&gt;&lt;a href=&quot;#一-运行效果以及源码&quot; class=&quot;headerlink&quot; title=&quot;一. 运行效果以及源码&quot;&gt;&lt;/a&gt;一. 运行效果以及源码&lt;/h3&gt;&lt;h4 id=&quot;1-gif图效果&quot;&gt;&lt;a href=&quot;#1-gif图效果&quot; c
      
    
    </summary>
    
    
      <category term="Android琐碎知识点" scheme="http://fanandjiu.com/categories/Android%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="Android琐碎知识点" scheme="http://fanandjiu.com/tags/Android%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="Android项目" scheme="http://fanandjiu.com/tags/Android%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>自定义View-XLLetterView</title>
    <link href="http://fanandjiu.com/%E8%87%AA%E5%AE%9A%E4%B9%89View-XLLetterView/"/>
    <id>http://fanandjiu.com/%E8%87%AA%E5%AE%9A%E4%B9%89View-XLLetterView/</id>
    <published>2020-06-19T15:56:58.000Z</published>
    <updated>2020-06-19T16:31:13.947Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-前言"><a href="#一-前言" class="headerlink" title="一. 前言"></a>一. 前言</h3><p>常用的应用场景：城市搜索的侧边栏，通讯录的侧边栏</p><p>Github地址：<a href="https://github.com/xiaoshitounen/XLLetterView" target="_blank" rel="noopener">XLLetterView</a></p><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/Self_View/XLLetterView/xlletter.gif" alt=""></p><h3 id="二-自定义View"><a href="#二-自定义View" class="headerlink" title="二. 自定义View"></a>二. 自定义View</h3><h4 id="1-自定义用到的属性"><a href="#1-自定义用到的属性" class="headerlink" title="1. 自定义用到的属性"></a>1. 自定义用到的属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绘制文本的画笔</span></span><br><span class="line"><span class="keyword">private</span> Paint paint;</span><br><span class="line"><span class="comment">//字母正常状态画笔的颜色</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> text_color = Color.WHITE;</span><br><span class="line"><span class="comment">//字母选中状态画笔颜色</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> select_text_color = Color.MAGENTA;</span><br><span class="line"><span class="comment">//画笔的粗细</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> text_size = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字母与左右的间距</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> space_hor = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字母之间或者字母和上下的间距</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> space_ver = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字母的最大高度</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> max_letter_height = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听者</span></span><br><span class="line"><span class="keyword">private</span> LetterChangeListener listener;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上一次选择字母</span></span><br><span class="line"><span class="keyword">private</span> String lastLetter;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当前选择的字母</span></span><br><span class="line"><span class="keyword">private</span> String currentLetter;</span><br></pre></td></tr></table></figure><h4 id="2-在values文件夹下自定义属性"><a href="#2-在values文件夹下自定义属性" class="headerlink" title="2. 在values文件夹下自定义属性"></a>2. 在values文件夹下自定义属性</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"XLLetterView"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"text_color"</span> <span class="attr">format</span>=<span class="string">"color"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"select_text_color"</span> <span class="attr">format</span>=<span class="string">"color"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"text_size"</span> <span class="attr">format</span>=<span class="string">"integer"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"space_hor"</span> <span class="attr">format</span>=<span class="string">"integer"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"space_ver"</span> <span class="attr">format</span>=<span class="string">"integer"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-创建构造方法"><a href="#3-创建构造方法" class="headerlink" title="3. 创建构造方法"></a>3. 创建构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造方法：Xml代码初始化</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> attrs</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">XLLetterView</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(context, attrs);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (attrs != <span class="keyword">null</span>)&#123;</span><br><span class="line">        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.XLLetterView);</span><br><span class="line"></span><br><span class="line">        text_color = typedArray.getColor(R.styleable.XLLetterView_text_color,text_color);</span><br><span class="line">        select_text_color = typedArray.getColor(R.styleable.XLLetterView_select_text_color,select_text_color);</span><br><span class="line">        text_size = typedArray.getInteger(R.styleable.XLLetterView_text_size,text_size);</span><br><span class="line">        space_hor = typedArray.getInteger(R.styleable.XLLetterView_space_hor,space_hor);</span><br><span class="line">        space_ver = typedArray.getInteger(R.styleable.XLLetterView_space_ver,space_ver);</span><br><span class="line"></span><br><span class="line">        text_size = PxUtil.spToPx(text_size,context);</span><br><span class="line">        space_hor = PxUtil.spToPx(space_hor,context);</span><br><span class="line">        space_ver = PxUtil.spToPx(space_ver,context);</span><br><span class="line"></span><br><span class="line">        typedArray.recycle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//初始化画笔</span></span><br><span class="line">    paint = <span class="keyword">new</span> Paint();</span><br><span class="line">    paint.setColor(text_color);</span><br><span class="line">    paint.setTextSize(text_size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-onMeasure和onDraw方法"><a href="#4-onMeasure和onDraw方法" class="headerlink" title="4. onMeasure和onDraw方法"></a>4. onMeasure和onDraw方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得测量模式和大小</span></span><br><span class="line">    <span class="keyword">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class="line">    <span class="keyword">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line">    <span class="keyword">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class="line">    <span class="keyword">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储wrap_content模式下的宽高</span></span><br><span class="line">    <span class="keyword">int</span> wrap_width = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> wrap_height = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Constant.letter.length; i++) &#123;</span><br><span class="line">        <span class="comment">//获取字母绘制出来的宽度</span></span><br><span class="line">        Rect rect = <span class="keyword">new</span> Rect();</span><br><span class="line">        paint.getTextBounds(Constant.letter[i],<span class="number">0</span>,<span class="number">1</span>,rect);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        Log.d(Constant.TAG,Constant.letter[i]+<span class="string">":"</span>+(rect.bottom - rect.top));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最大宽度</span></span><br><span class="line">        wrap_width = Math.max(wrap_width,rect.right - rect.left);</span><br><span class="line">        max_letter_height = Math.max(max_letter_height,rect.bottom - rect.top);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//累加间距</span></span><br><span class="line">    wrap_width += space_hor * <span class="number">2</span>;</span><br><span class="line">    wrap_height += max_letter_height * Constant.letter.length + space_ver * (Constant.letter.length + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据测量模式去保存相应的测量宽度</span></span><br><span class="line">    <span class="comment">//即如果是MeasureSpec.EXACTLY直接使用父ViewGroup传入的宽和高</span></span><br><span class="line">    <span class="comment">//否则设置为自己计算的宽和高，即为warp_content时</span></span><br><span class="line">    setMeasuredDimension(</span><br><span class="line">            (widthMode == MeasureSpec.EXACTLY) ? widthSize : wrap_width,</span><br><span class="line">            (heightMode == MeasureSpec.EXACTLY) ? heightSize : wrap_height</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取宽高</span></span><br><span class="line">    <span class="keyword">int</span> width = getWidth();</span><br><span class="line">    <span class="keyword">int</span> height = getHeight();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算绘制的baseline往下的偏移距离 baseline的坐标是0</span></span><br><span class="line">    Paint.FontMetrics fontMetrics = paint.getFontMetrics();</span><br><span class="line">    <span class="keyword">float</span> base_space = fontMetrics.bottom;</span><br><span class="line">    Log.d(Constant.TAG,<span class="string">"top:"</span>+fontMetrics.top);</span><br><span class="line">    Log.d(Constant.TAG,<span class="string">"ascent:"</span>+fontMetrics.ascent);</span><br><span class="line">    Log.d(Constant.TAG,<span class="string">"descent:"</span>+fontMetrics.descent);</span><br><span class="line">    Log.d(Constant.TAG,<span class="string">"bottom:"</span>+fontMetrics.bottom);</span><br><span class="line">    Log.d(Constant.TAG,<span class="string">"leading:"</span>+fontMetrics.leading);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制每一个字母</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Constant.letter.length; i++) &#123;</span><br><span class="line">        <span class="comment">//1.获取每一个字母的高度</span></span><br><span class="line">        Rect rect = <span class="keyword">new</span> Rect();</span><br><span class="line">        paint.getTextBounds(Constant.letter[i],<span class="number">0</span>,<span class="number">1</span>,rect);</span><br><span class="line">        <span class="keyword">int</span> letter_width = rect.right - rect.left;</span><br><span class="line">        <span class="keyword">int</span> letter_height = rect.bottom - rect.top;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.存储绘制文本的起始坐标</span></span><br><span class="line">        <span class="keyword">float</span> x;</span><br><span class="line">        <span class="keyword">float</span> y;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取绘制的x起始点</span></span><br><span class="line">        x = (width - letter_width) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.获取绘制的y起始点</span></span><br><span class="line">        <span class="keyword">float</span> distance = ((fontMetrics.bottom - fontMetrics.top) / <span class="number">2</span>) - fontMetrics.bottom;</span><br><span class="line">        <span class="keyword">float</span> location = ((max_letter_height - letter_height) &gt;&gt; <span class="number">1</span>) + (letter_height &gt;&gt; <span class="number">1</span>) + distance;</span><br><span class="line">        y = space_ver + location + (space_ver + max_letter_height) * i;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.绘制文本</span></span><br><span class="line">        <span class="keyword">if</span> (TextUtils.equals(currentLetter,Constant.letter[i]))&#123;</span><br><span class="line">            paint.setColor(select_text_color);</span><br><span class="line"></span><br><span class="line">            canvas.drawText(</span><br><span class="line">                    Constant.letter[i],</span><br><span class="line">                    x,</span><br><span class="line">                    y,</span><br><span class="line">                    paint</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            paint.setColor(text_color);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            canvas.drawText(</span><br><span class="line">                    Constant.letter[i],</span><br><span class="line">                    x,</span><br><span class="line">                    y,</span><br><span class="line">                    paint</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-触摸事件，回调触摸到的字母"><a href="#5-触摸事件，回调触摸到的字母" class="headerlink" title="5. 触摸事件，回调触摸到的字母"></a>5. 触摸事件，回调触摸到的字母</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取触摸点的坐标x,y</span></span><br><span class="line">    <span class="keyword">float</span> x = event.getX();</span><br><span class="line">    <span class="keyword">float</span> y = event.getY();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取选中的字母</span></span><br><span class="line">    <span class="keyword">float</span> position =  (y / (space_ver + max_letter_height));</span><br><span class="line">    Log.d(Constant.TAG,<span class="string">"position:"</span>+position);</span><br><span class="line">    <span class="keyword">if</span> (position &gt;= <span class="number">0</span> &amp;&amp; position &lt; Constant.letter.length) &#123;</span><br><span class="line">        currentLetter = Constant.letter[(<span class="keyword">int</span>) Math.ceil(position)-<span class="number">1</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        currentLetter = <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            <span class="keyword">if</span> (TextUtils.equals(currentLetter,lastLetter))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line"></span><br><span class="line">            <span class="comment">//记录上一次的字母</span></span><br><span class="line">            lastLetter = currentLetter;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回调</span></span><br><span class="line">    <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">        listener.currentLetter(currentLetter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//刷新</span></span><br><span class="line">    invalidate();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 回调当前的字母</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LetterChangeListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">currentLetter</span><span class="params">(String letter)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置监听者</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLetterChangeListener</span><span class="params">(LetterChangeListener listener)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.listener = listener;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-具体的使用"><a href="#三-具体的使用" class="headerlink" title="三. 具体的使用"></a>三. 具体的使用</h3><p>首先需要添加依赖，添加依赖之后，在布局文件中这样调用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">swu.xl.xlletterview.XLLetterView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/letter"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@color/colorPrimaryDark"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:text_size</span>=<span class="string">"12"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        XLLetterView letterView = findViewById(R.id.letter);</span><br><span class="line"></span><br><span class="line">        letterView.setLetterChangeListener(<span class="keyword">new</span> XLLetterView.LetterChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">currentLetter</span><span class="params">(String letter)</span> </span>&#123;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"当前的字母："</span>+letter, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        letterView.setCurrentLetter(<span class="string">"S"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/Self_View/XLLetterView/xlletter.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-前言&quot;&gt;&lt;a href=&quot;#一-前言&quot; class=&quot;headerlink&quot; title=&quot;一. 前言&quot;&gt;&lt;/a&gt;一. 前言&lt;/h3&gt;&lt;p&gt;常用的应用场景：城市搜索的侧边栏，通讯录的侧边栏&lt;/p&gt;
&lt;p&gt;Github地址：&lt;a href=&quot;https://gi
      
    
    </summary>
    
    
      <category term="Android项目" scheme="http://fanandjiu.com/categories/Android%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Android琐碎知识点" scheme="http://fanandjiu.com/tags/Android%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="Android自定义View" scheme="http://fanandjiu.com/tags/Android%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
  </entry>
  
  <entry>
    <title>Android项目14：iMarTen</title>
    <link href="http://fanandjiu.com/Android%E9%A1%B9%E7%9B%AE14%EF%BC%9AiMarTen/"/>
    <id>http://fanandjiu.com/Android%E9%A1%B9%E7%9B%AE14%EF%BC%9AiMarTen/</id>
    <published>2020-06-19T12:36:25.000Z</published>
    <updated>2020-06-19T16:50:33.478Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-运行效果以及源码"><a href="#一-运行效果以及源码" class="headerlink" title="一. 运行效果以及源码"></a>一. 运行效果以及源码</h3><h4 id="1-gif图效果"><a href="#1-gif图效果" class="headerlink" title="1.gif图效果"></a>1.gif图效果</h4><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/iMarTen/iMar_demo_1.gif" alt=""></p><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/iMarTen/iMar_demo_2.gif" alt=""></p><h4 id="2-源码地址"><a href="#2-源码地址" class="headerlink" title="2.源码地址"></a>2.源码地址</h4><p><a href="https://github.com/xiaoshitounen/Underess" target="_blank" rel="noopener">https://github.com/xiaoshitounen/Underess</a></p><h3 id="二-主要的思路"><a href="#二-主要的思路" class="headerlink" title="二.主要的思路"></a>二.主要的思路</h3><p>① XLBottomView+ViewPager+Fragment达成：漫威数据和网球数据的分离。</p><p>② TabLayout+ViewPager+Fragment+RecyclerView达成：网格布局和瀑布布局显示的分离。</p><h3 id="三-使用到的技术点"><a href="#三-使用到的技术点" class="headerlink" title="三.使用到的技术点"></a>三.使用到的技术点</h3><p><a href="https://fanandjiu.com/Android项目11：图片展示/">Android项目11：图片展示</a></p><p><a href="https://fanandjiu.com/Android控件-ViewPager/">Android控件-ViewPager</a></p><p><a href="https://fanandjiu.com/Android控件-TabLayout/">Android控件-TabLayout</a></p><p><a href="https://fanandjiu.com/Android碎片-Fragment/">Android碎片-Fragment</a></p><p><a href="https://fanandjiu.com/自定义View-XLBottomView/">自定义View-XLBottomView</a></p><h3 id="四-配套论文"><a href="#四-配套论文" class="headerlink" title="四. 配套论文"></a>四. 配套论文</h3><p>链接:<a href="https://pan.baidu.com/s/1AKToY490yd125JtQS7kgjw" target="_blank" rel="noopener">https://pan.baidu.com/s/1AKToY490yd125JtQS7kgjw</a>  密码:hgtw</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-运行效果以及源码&quot;&gt;&lt;a href=&quot;#一-运行效果以及源码&quot; class=&quot;headerlink&quot; title=&quot;一. 运行效果以及源码&quot;&gt;&lt;/a&gt;一. 运行效果以及源码&lt;/h3&gt;&lt;h4 id=&quot;1-gif图效果&quot;&gt;&lt;a href=&quot;#1-gif图效果&quot; c
      
    
    </summary>
    
    
      <category term="Android琐碎知识点" scheme="http://fanandjiu.com/categories/Android%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="Android琐碎知识点" scheme="http://fanandjiu.com/tags/Android%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="Android项目" scheme="http://fanandjiu.com/tags/Android%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Android项目13：绘画</title>
    <link href="http://fanandjiu.com/Android%E9%A1%B9%E7%9B%AE13%EF%BC%9A%E7%BB%98%E7%94%BB/"/>
    <id>http://fanandjiu.com/Android%E9%A1%B9%E7%9B%AE13%EF%BC%9A%E7%BB%98%E7%94%BB/</id>
    <published>2020-06-19T12:36:12.000Z</published>
    <updated>2020-06-20T03:38:19.789Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-运行效果以及源码"><a href="#一-运行效果以及源码" class="headerlink" title="一. 运行效果以及源码"></a>一. 运行效果以及源码</h3><h4 id="1-gif图效果"><a href="#1-gif图效果" class="headerlink" title="1.gif图效果"></a>1.gif图效果</h4><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/DrawingBoard/draw_demo_1.gif" alt=""></p><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/DrawingBoard/draw_demo_2.gif" alt=""></p><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/DrawingBoard/draw_demo_3.gif" alt=""></p><h4 id="2-源码地址"><a href="#2-源码地址" class="headerlink" title="2.源码地址"></a>2.源码地址</h4><p><a href="https://github.com/xiaoshitounen/MyDrawingBoard" target="_blank" rel="noopener">MyDrawingBoard</a></p><h3 id="二-主要的思路"><a href="#二-主要的思路" class="headerlink" title="二.主要的思路"></a>二.主要的思路</h3><p>主要就是结合了：文件操作外部存储，数据库SQLite，ListView以及的项目画板的内容。</p><h3 id="三-使用到的技术点"><a href="#三-使用到的技术点" class="headerlink" title="三.使用到的技术点"></a>三.使用到的技术点</h3><p><a href="https://fanandjiu.com/Android存储-文件操作-外部存储/">文件操作-外部存储</a></p><p><a href="https://fanandjiu.com/Android存储-数据库-Sqlite/">Android存储-数据库-Sqlite</a></p><p><a href="https://fanandjiu.com/Android控件-ListView/">Android控件-ListView</a></p><p><a href="https://fanandjiu.com/Android项目9：画板/">Android项目9：画板</a></p><h3 id="四-配套的论文"><a href="#四-配套的论文" class="headerlink" title="四. 配套的论文"></a>四. 配套的论文</h3><p>链接:<a href="https://pan.baidu.com/s/1Yb74FgXu9FQJTQw--f6d-g" target="_blank" rel="noopener">https://pan.baidu.com/s/1Yb74FgXu9FQJTQw--f6d-g</a>  密码:qjml</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-运行效果以及源码&quot;&gt;&lt;a href=&quot;#一-运行效果以及源码&quot; class=&quot;headerlink&quot; title=&quot;一. 运行效果以及源码&quot;&gt;&lt;/a&gt;一. 运行效果以及源码&lt;/h3&gt;&lt;h4 id=&quot;1-gif图效果&quot;&gt;&lt;a href=&quot;#1-gif图效果&quot; c
      
    
    </summary>
    
    
      <category term="Android琐碎知识点" scheme="http://fanandjiu.com/categories/Android%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="Android琐碎知识点" scheme="http://fanandjiu.com/tags/Android%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="Android项目" scheme="http://fanandjiu.com/tags/Android%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Android项目12：天气预报</title>
    <link href="http://fanandjiu.com/Android%E9%A1%B9%E7%9B%AE12%EF%BC%9A%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5/"/>
    <id>http://fanandjiu.com/Android%E9%A1%B9%E7%9B%AE12%EF%BC%9A%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5/</id>
    <published>2020-06-19T12:35:56.000Z</published>
    <updated>2020-06-19T16:43:58.327Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-运行效果以及源码"><a href="#一-运行效果以及源码" class="headerlink" title="一. 运行效果以及源码"></a>一. 运行效果以及源码</h3><h4 id="1-gif图效果"><a href="#1-gif图效果" class="headerlink" title="1.gif图效果"></a>1.gif图效果</h4><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/Weatherforcast/weather_demo_1.gif" alt=""></p><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/Weatherforcast/weather_demo_2.gif" alt=""></p><h4 id="2-源码地址"><a href="#2-源码地址" class="headerlink" title="2.源码地址"></a>2.源码地址</h4><p><a href="https://github.com/xiaoshitounen/WeatherForecast" target="_blank" rel="noopener">WeatherForecast</a></p><h3 id="二-主要的思路"><a href="#二-主要的思路" class="headerlink" title="二.主要的思路"></a>二.主要的思路</h3><h4 id="1-定位"><a href="#1-定位" class="headerlink" title="1. 定位"></a>1. 定位</h4><p>使用百度地图提供的Android地图SDK中的定位功能获取到当前位置的经纬度信息。</p><p>参考的开发者文档地址是：<a href="http://lbsyun.baidu.com/index.php?title=android-locsdk。" target="_blank" rel="noopener">http://lbsyun.baidu.com/index.php?title=android-locsdk。</a></p><h4 id="2-使用百度提供的根据经纬度信息返回城市信息的API接口"><a href="#2-使用百度提供的根据经纬度信息返回城市信息的API接口" class="headerlink" title="2.使用百度提供的根据经纬度信息返回城市信息的API接口"></a>2.使用百度提供的根据经纬度信息返回城市信息的API接口</h4><p><a href="http://api.map.baidu.com/geocoder?output=json&amp;location=23.131427,113.379763&amp;ak=esNPFDwwsXWtsQfw4NMNmur1。" target="_blank" rel="noopener">http://api.map.baidu.com/geocoder?output=json&amp;location=23.131427,113.379763&amp;ak=esNPFDwwsXWtsQfw4NMNmur1。</a></p><h4 id="3-天气信息的来源是百度地图的天气API"><a href="#3-天气信息的来源是百度地图的天气API" class="headerlink" title="3.天气信息的来源是百度地图的天气API"></a>3.天气信息的来源是百度地图的天气API</h4><p><a href="http://api.map.baidu.com/telematics/v3/weather?location=%E9%87%8D%E5%BA%86&amp;output=json&amp;ak=FkPhtMBK0HTIQNh7gG4cNUttSTyr0nzo](http://api.map.baidu.com/telematics/v3/weather?location=重庆&amp;output=json&amp;ak=FkPhtMBK0HTIQNh7gG4cNUttSTyr0nzo)。" target="_blank" rel="noopener">http://api.map.baidu.com/telematics/v3/weather?location=%E9%87%8D%E5%BA%86&amp;output=json&amp;ak=FkPhtMBK0HTIQNh7gG4cNUttSTyr0nzo](http://api.map.baidu.com/telematics/v3/weather?location=重庆&amp;output=json&amp;ak=FkPhtMBK0HTIQNh7gG4cNUttSTyr0nzo)。</a></p><h3 id="三-使用到的技术点"><a href="#三-使用到的技术点" class="headerlink" title="三.使用到的技术点"></a>三.使用到的技术点</h3><p><a href="https://fanandjiu.com/Android随笔-接入百度地图/">Android随笔-接入百度地图</a></p><p><a href="https://fanandjiu.com/Android控件-ListView/">Android控件-ListView</a></p><p><a href="https://fanandjiu.com/自定义View-XLLetterView/#more">自定义View-XLLetterView</a></p><h3 id="四-配套的论文"><a href="#四-配套的论文" class="headerlink" title="四.配套的论文"></a>四.配套的论文</h3><p>链接:<a href="https://pan.baidu.com/s/11EXF8U6HyMQGt-I0RJpUOw" target="_blank" rel="noopener">https://pan.baidu.com/s/11EXF8U6HyMQGt-I0RJpUOw</a>  密码:x87b</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-运行效果以及源码&quot;&gt;&lt;a href=&quot;#一-运行效果以及源码&quot; class=&quot;headerlink&quot; title=&quot;一. 运行效果以及源码&quot;&gt;&lt;/a&gt;一. 运行效果以及源码&lt;/h3&gt;&lt;h4 id=&quot;1-gif图效果&quot;&gt;&lt;a href=&quot;#1-gif图效果&quot; c
      
    
    </summary>
    
    
      <category term="Android琐碎知识点" scheme="http://fanandjiu.com/categories/Android%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="Android琐碎知识点" scheme="http://fanandjiu.com/tags/Android%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="Android项目" scheme="http://fanandjiu.com/tags/Android%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>算法分析设计-概率算法</title>
    <link href="http://fanandjiu.com/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E8%AE%BE%E8%AE%A1-%E6%A6%82%E7%8E%87%E7%AE%97%E6%B3%95/"/>
    <id>http://fanandjiu.com/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E8%AE%BE%E8%AE%A1-%E6%A6%82%E7%8E%87%E7%AE%97%E6%B3%95/</id>
    <published>2020-06-16T07:01:18.000Z</published>
    <updated>2020-06-21T10:23:03.915Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-概率算法"><a href="#一-概率算法" class="headerlink" title="一. 概率算法"></a>一. 概率算法</h3><p>概率算法(Randomized algorithm)</p><h3 id="二-三门问题"><a href="#二-三门问题" class="headerlink" title="二. 三门问题"></a>二. 三门问题</h3><h4 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h4><p><img src="https://algorithm-1300729795.cos.ap-chengdu.myqcloud.com/Randomizedalgorithm/sanmen_problem.png" alt=""></p><h4 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreeDoor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> trial_num = <span class="number">10000</span>;</span><br><span class="line">        <span class="keyword">int</span> change_revenue;</span><br><span class="line">        <span class="keyword">int</span> no_change_revenue;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//选手没有改变选择的情况下，10000次下成功的概率</span></span><br><span class="line">        no_change_revenue = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; trial_num; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> real = <span class="keyword">new</span> Random().nextInt(<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">int</span> choose = <span class="keyword">new</span> Random().nextInt(<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">if</span> (real == choose)&#123;</span><br><span class="line">                no_change_revenue = no_change_revenue + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//选手改变选择的情况，10000次下成功的概率</span></span><br><span class="line">        change_revenue = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; trial_num; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> real = <span class="keyword">new</span> Random().nextInt(<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">int</span> choose = <span class="keyword">new</span> Random().nextInt(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (real != choose)&#123;</span><br><span class="line">                change_revenue = change_revenue + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Change revenue："</span>+change_revenue+<span class="string">"; not change revenue："</span>+no_change_revenue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//某次的运行结果</span></span><br><span class="line">Change revenue：<span class="number">6714</span>; not change revenue：<span class="number">3266</span></span><br></pre></td></tr></table></figure><h3 id="三-相亲问题"><a href="#三-相亲问题" class="headerlink" title="三. 相亲问题"></a>三. 相亲问题</h3><h4 id="1-题目描述-1"><a href="#1-题目描述-1" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h4><p><img src="https://algorithm-1300729795.cos.ap-chengdu.myqcloud.com/Randomizedalgorithm/xiangqing_problem.png" alt=""></p><h4 id="2-代码-1"><a href="#2-代码-1" class="headerlink" title="2.代码"></a>2.代码</h4><p><img src="https://algorithm-1300729795.cos.ap-chengdu.myqcloud.com/Randomizedalgorithm/xiangqing_question.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecretaryProblem</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查某一次相亲是否选中最佳的人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">check_success</span><span class="params">(<span class="keyword">double</span>[] candidates, <span class="keyword">int</span> stop_time)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> max_in_observation = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> choosen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//观察选出stop_time之前条件最好的人</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stop_time; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &gt; max_in_observation)&#123;</span><br><span class="line">                max_in_observation = candidates[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//stop_time之后，只要遇到条件超过之前观察的就选它为相亲对象</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = stop_time; i &lt; candidates.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &gt;= max_in_observation)&#123;</span><br><span class="line">                choosen = candidates[i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找到stop_time之后，真正条件最好的人</span></span><br><span class="line">        <span class="keyword">double</span> max_in_all = max_in_observation;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = stop_time; i &lt; candidates.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &gt;= max_in_all) &#123;</span><br><span class="line">                max_in_all = candidates[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//比较得到结果</span></span><br><span class="line">        <span class="keyword">if</span> (choosen == max_in_all) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试程序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//实验次数</span></span><br><span class="line">        <span class="keyword">int</span> trial_num = <span class="number">1000000</span>;</span><br><span class="line">        <span class="comment">//一组相亲的次数</span></span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对应成功的次数</span></span><br><span class="line">        <span class="keyword">int</span>[] success_times = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; trial_num; i++) &#123;</span><br><span class="line">            <span class="comment">//生成一组相亲数据</span></span><br><span class="line">            <span class="keyword">double</span>[] candidates = generateRandomNumbers(n);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断每一种选择的成功次数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> stop_time = <span class="number">0</span>; stop_time &lt; n; stop_time++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (check_success(candidates,stop_time))&#123;</span><br><span class="line">                    success_times[stop_time]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(success_times));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成一组随机数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span>[] generateRandomNumbers(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">double</span>[] randoms = <span class="keyword">new</span> <span class="keyword">double</span>[n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">double</span> v = <span class="keyword">new</span> Random().nextDouble();</span><br><span class="line"></span><br><span class="line">            randoms[i] = v;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> randoms;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//某次的运行结果</span></span><br><span class="line">[<span class="number">49864</span>, <span class="number">177246</span>, <span class="number">254832</span>, <span class="number">307353</span>, <span class="number">343039</span>, <span class="number">365779</span>, <span class="number">378529</span>, <span class="number">383169</span>, <span class="number">380892</span>, <span class="number">372516</span>, <span class="number">358383</span>, <span class="number">339562</span>, <span class="number">316130</span>, <span class="number">288496</span>, <span class="number">257085</span>, <span class="number">222080</span>, <span class="number">183753</span>, <span class="number">141744</span>, <span class="number">97207</span>, <span class="number">49862</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-概率算法&quot;&gt;&lt;a href=&quot;#一-概率算法&quot; class=&quot;headerlink&quot; title=&quot;一. 概率算法&quot;&gt;&lt;/a&gt;一. 概率算法&lt;/h3&gt;&lt;p&gt;概率算法(Randomized algorithm)&lt;/p&gt;
&lt;h3 id=&quot;二-三门问题&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="算法分析设计" scheme="http://fanandjiu.com/categories/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="算法" scheme="http://fanandjiu.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Android随笔-style的使用</title>
    <link href="http://fanandjiu.com/Android%E9%9A%8F%E7%AC%94-style%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://fanandjiu.com/Android%E9%9A%8F%E7%AC%94-style%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-06-15T06:13:08.000Z</published>
    <updated>2020-06-15T06:14:16.258Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一-笔记"><a href="#一-笔记" class="headerlink" title="一. 笔记"></a>一. 笔记</h4><p>[Android系统更改状态栏字体颜色](<a href="https://www.cnblogs.com/linghu-java/p/5737321.html" target="_blank" rel="noopener">https://www.cnblogs.com/linghu-java/p/5737321.html</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Base application theme. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">        &lt;!<span class="selector-tag">--Android</span> 6<span class="selector-class">.0</span>开始，谷歌官方提供了支持，</span></span><br><span class="line"><span class="css">            在<span class="selector-tag">style</span>属性中配置<span class="selector-tag">android</span><span class="selector-pseudo">:windowLightStatusBar</span>即可，</span></span><br><span class="line">            设置为true时，当statusbar的背景颜色为淡色时，</span><br><span class="line">            statusbar的文字颜色会变成灰色，</span><br><span class="line">            为false时同理。</span><br><span class="line">        --&gt;</span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowLightStatusBar"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"status_bar_color"</span>&gt;</span>#000000<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一-笔记&quot;&gt;&lt;a href=&quot;#一-笔记&quot; class=&quot;headerlink&quot; title=&quot;一. 笔记&quot;&gt;&lt;/a&gt;一. 笔记&lt;/h4&gt;&lt;p&gt;[Android系统更改状态栏字体颜色](&lt;a href=&quot;https://www.cnblogs.com/linghu
      
    
    </summary>
    
    
      <category term="Android琐碎知识点" scheme="http://fanandjiu.com/categories/Android%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="Android琐碎知识点" scheme="http://fanandjiu.com/tags/Android%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Hexo问题-博客部署到个人的云服务器</title>
    <link href="http://fanandjiu.com/Hexo%E9%97%AE%E9%A2%98-%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://fanandjiu.com/Hexo%E9%97%AE%E9%A2%98-%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-06-11T15:27:25.000Z</published>
    <updated>2020-06-11T16:12:37.273Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-购买云服务器"><a href="#一-购买云服务器" class="headerlink" title="一. 购买云服务器"></a>一. 购买云服务器</h3><p>打开 <a href="https://cloud.tencent.com/" target="_blank" rel="noopener">腾讯云</a>，选购你想要的云服务器，我感觉购买的时候选择包年包月计费会好一点。</p><h3 id="二-Hexo-博客部署到腾讯云"><a href="#二-Hexo-博客部署到腾讯云" class="headerlink" title="二. Hexo 博客部署到腾讯云"></a>二. Hexo 博客部署到腾讯云</h3><h4 id="1-进入到云服务器中"><a href="#1-进入到云服务器中" class="headerlink" title="1. 进入到云服务器中"></a>1. 进入到云服务器中</h4><p>登录之后可以选择密码或者秘钥，默认密码好像就是你腾讯云账号的密码。</p><p>我选择的是秘钥的登录方式，你获取秘钥的时候会在你的电脑上生成一个秘钥文件，每次登录的时候使用它就好，我觉得很方便。</p><p><img src="https://xiaoshitou-blog-1300729795.cos.ap-chongqing.myqcloud.com/tenxunyun/tenxunyun_show.png" alt=""></p><h4 id="2-云服务器端配置-git"><a href="#2-云服务器端配置-git" class="headerlink" title="2. 云服务器端配置 git"></a>2. 云服务器端配置 git</h4><p>① 安装依赖库和编译工具</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.安装依赖库：</span></span><br><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel </span><br><span class="line">  </span><br><span class="line"><span class="comment">//2.安装编译工具：</span></span><br><span class="line">yum install gcc perl-ExtUtils-MakeMaker <span class="keyword">package</span></span><br></pre></td></tr></table></figure><p>② 下载 git</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.选择一个目录来存放下载下来的 git 安装包。这里选择了/usr/local/src 目录</span></span><br><span class="line">cd /usr/local/src</span><br><span class="line">  </span><br><span class="line"><span class="comment">//2.到官网找一个新版稳定的源码包下载到 /usr/local/src 文件夹里</span></span><br><span class="line">wget https:<span class="comment">//www.kernel.org/pub/software/scm/git/git-2.16.2.tar.gz</span></span><br></pre></td></tr></table></figure><p>③ 解压编译 git</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.在当前目录下解压 git-2.16.2.tar.gz</span></span><br><span class="line">tar -zvxf git-<span class="number">2.16</span><span class="number">.2</span>.tar.gz</span><br><span class="line">  </span><br><span class="line"><span class="comment">//2.进入 git-2.16.2.tar.gz 目录下</span></span><br><span class="line">cd git-<span class="number">2.16</span><span class="number">.2</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//3.执行编译</span></span><br><span class="line">make all prefix=/usr/local/git</span><br><span class="line">  </span><br><span class="line"><span class="comment">//4.安装 git 到/usr/local/git 目录下</span></span><br><span class="line">make install prefix=/usr/local/git</span><br></pre></td></tr></table></figure><p>④ 配置 git 环境变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.将 git 加入 PATH 目录中</span></span><br><span class="line">echo <span class="string">'export PATH=$PATH:/usr/local/git/bin'</span> &gt;&gt; /etc/bashrc</span><br><span class="line">  </span><br><span class="line"><span class="comment">//2.使 git 环境变量生效</span></span><br><span class="line">source /etc/bashrc</span><br></pre></td></tr></table></figure><p>⑤ 查看 git 版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p>⑥ 创建 git 仓库，用于存放博客网站资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.在 home/git 的目录下，创建一个名为hexoBlog的裸仓库（bare repo）。</span></span><br><span class="line"><span class="comment">//如果没有 home/git 目录，需要先创建；然后修改目录的所有权和用户权限。</span></span><br><span class="line">mkdir /home/git/</span><br><span class="line">chown -R $USER:$USER /home/git/</span><br><span class="line">chmod -R <span class="number">755</span> /home/git/</span><br><span class="line">  </span><br><span class="line"><span class="comment">//2.创建一个裸的 git 仓库</span></span><br><span class="line">cd /home/git/</span><br><span class="line">git init --bare hexoBlog.git</span><br></pre></td></tr></table></figure><p>⑦ 创建一个新的 git 钩子，用于自动部署。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.在 /home/git/hexoBlog.git 下，有一个自动生成的 hooks 文件夹。我们需要在里边新建一个新的钩子文件 post-receive。</span></span><br><span class="line">vim /home/git/hexoBlog.git/hooks/post-receive</span><br><span class="line">  </span><br><span class="line"><span class="comment">//2.按 i 键进入文件的编辑模式，在该文件中添加两行代码（将下边的代码粘贴进去)，指定 Git 的工作树（源代码）和 Git 目录（配置文件等）。</span></span><br><span class="line">#!/bin/bash</span><br><span class="line">git --work-tree=/home/hexoBlog --git-dir=/home/git/hexoBlog.git checkout -f</span><br><span class="line"><span class="comment">//然后，按 Esc 键退出编辑模式，输入:wq 保存退出。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//3.修改文件权限，使得其可执行。</span></span><br><span class="line">chmod +x /home/git/hexoBlog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><h3 id="三-云服务器端配置-Nginx"><a href="#三-云服务器端配置-Nginx" class="headerlink" title="三. 云服务器端配置 Nginx"></a>三. 云服务器端配置 Nginx</h3><h4 id="1-安装-Nginx"><a href="#1-安装-Nginx" class="headerlink" title="1. 安装 Nginx"></a>1. 安装 Nginx</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure><h4 id="2-启动-Nginx"><a href="#2-启动-Nginx" class="headerlink" title="2. 启动 Nginx"></a>2. 启动 Nginx</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx start</span><br></pre></td></tr></table></figure><h4 id="3-测试-Nginx-服务器"><a href="#3-测试-Nginx-服务器" class="headerlink" title="3. 测试 Nginx 服务器"></a>3. 测试 Nginx 服务器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http:<span class="comment">//127.0.0.1</span></span><br></pre></td></tr></table></figure><h4 id="4-正常获取以下欢迎页面说明Nginx安装成功。"><a href="#4-正常获取以下欢迎页面说明Nginx安装成功。" class="headerlink" title="4. 正常获取以下欢迎页面说明Nginx安装成功。"></a>4. 正常获取以下欢迎页面说明Nginx安装成功。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Connecting to <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">80</span>... connected.</span><br><span class="line">HTTP request sent, awaiting response... <span class="number">200</span> OK</span><br><span class="line">Length: <span class="number">43704</span> (<span class="number">43</span>K) [text/html]</span><br><span class="line">Saving to: ‘index.html’</span><br><span class="line"></span><br><span class="line"><span class="number">100</span>%[=======================================&gt;] <span class="number">43</span>,<span class="number">704</span>      --.-K/s   in <span class="number">0</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2018</span>-<span class="number">03</span>-<span class="number">09</span> <span class="number">23</span>:<span class="number">04</span>:<span class="number">09</span> (<span class="number">487</span> MB/s) - ‘index.html’ saved [<span class="number">43704</span>/<span class="number">43704</span>]</span><br></pre></td></tr></table></figure><h4 id="5-测试网页是否能打开"><a href="#5-测试网页是否能打开" class="headerlink" title="5. 测试网页是否能打开"></a>5. 测试网页是否能打开</h4><p>在浏览器中输入服务器 ip 地址，就是服务器的公网 ip。</p><h4 id="6-配置-Nginx-托管文件目录"><a href="#6-配置-Nginx-托管文件目录" class="headerlink" title="6. 配置 Nginx 托管文件目录"></a>6. 配置 Nginx 托管文件目录</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建 /home/hexoBlog目录，用于 Nginx 托管。</span></span><br><span class="line">mkdir /home/hexoBlog/</span><br><span class="line">chown -R $USER:$USER /home/hexoBlog/</span><br><span class="line">chmod -R <span class="number">755</span> /home/hexoBlog/</span><br><span class="line">  </span><br><span class="line"><span class="comment">//2.查看 Nginx 的默认配置的安装位置</span></span><br><span class="line">nginx -t</span><br><span class="line">  </span><br><span class="line"><span class="comment">//3.修改Nginx的默认配置，其中 vim 后边就是刚才查到的安装位置（每个人可能都不一样）</span></span><br><span class="line">vim /etc/nginx/nginx.conf</span><br><span class="line">  </span><br><span class="line"><span class="comment">//4.按方向键，找到如下位置</span></span><br><span class="line"><span class="comment">//按i键进入插入模式，将其中的 root 值改为 /home/hexoBlog （刚才创建的托管仓库目录）。</span></span><br><span class="line"><span class="comment">//如果有个人域名，将 server_name 值改成你的域名。</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span> default_server;</span><br><span class="line">    listen [::]:<span class="number">80</span> default_server;</span><br><span class="line">    root /home/hexoBlog;    #需要修改</span><br><span class="line">    </span><br><span class="line">    server_name _;          #有个人域名可以修改</span><br><span class="line">    </span><br><span class="line">    # Load configuration files for the default server block.</span><br><span class="line">    include /etc/nginx/<span class="keyword">default</span>.d<span class="comment">/*.conf;</span></span><br><span class="line"><span class="comment">    location / &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    error_page 404 /404.html;</span></span><br><span class="line"><span class="comment">        location = /40x.html &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br></pre></td></tr></table></figure><h4 id="7-重启-Nginx-服务"><a href="#7-重启-Nginx-服务" class="headerlink" title="7. 重启 Nginx 服务"></a>7. 重启 Nginx 服务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><h3 id="四-修改-hexo-站点配置文件-git-相关设置"><a href="#四-修改-hexo-站点配置文件-git-相关设置" class="headerlink" title="四. 修改 hexo 站点配置文件 git 相关设置"></a>四. 修改 hexo 站点配置文件 git 相关设置</h3><h4 id="1-打开站点配置文件"><a href="#1-打开站点配置文件" class="headerlink" title="1. 打开站点配置文件"></a>1. 打开站点配置文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: </span><br><span class="line">       wwh: root@<span class="number">139.155</span><span class="number">.13</span><span class="number">.185</span>:/home/git/hexoBlog</span><br><span class="line">       coding: git<span class="meta">@e</span>.coding.net:xiaoshitounen/xiaoshitounen.coding.me.git</span><br><span class="line">       github: git<span class="meta">@github</span>.com:xiaoshitounen/xiaoshitounen.github.io.git</span><br><span class="line">       gitee: git<span class="meta">@gitee</span>.com:xuxiaoshi/xuxiaoshi.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h4 id="2-运行测试"><a href="#2-运行测试" class="headerlink" title="2. 运行测试"></a>2. 运行测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd 你的 hexo 目录</span><br><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>① hexo d 的时候需要输入密码，我没有设置过密码，密码就是我腾讯云的密码。</p><p><img src="https://xiaoshitou-blog-1300729795.cos.ap-chongqing.myqcloud.com/tenxunyun/hexo_d.png" alt=""></p><p>② 提交结束后，在云服务器中可以看到内容的确提交上来了。</p><p><img src="https://xiaoshitou-blog-1300729795.cos.ap-chongqing.myqcloud.com/tenxunyun/tengxun_blog_show.png" alt=""></p><h4 id="3-打开你的公网-IP，看是不是已经部署成功了。"><a href="#3-打开你的公网-IP，看是不是已经部署成功了。" class="headerlink" title="3. 打开你的公网 IP，看是不是已经部署成功了。"></a>3. 打开你的公网 IP，看是不是已经部署成功了。</h4><p><img src="https://xiaoshitou-blog-1300729795.cos.ap-chongqing.myqcloud.com/tenxunyun/blog_show.png" alt=""></p><h3 id="四-通过-SCP-上传文件到-Linux-云服务器"><a href="#四-通过-SCP-上传文件到-Linux-云服务器" class="headerlink" title="四. 通过 SCP 上传文件到 Linux 云服务器"></a>四. 通过 SCP 上传文件到 Linux 云服务器</h3><p>① 官方文档：<a href="https://cloud.tencent.com/document/product/213/2133" target="_blank" rel="noopener">Linux 系统通过 SCP 上传文件到 Linux 云服务器</a></p><p>② 测试的结果如下：</p><p><img src="https://xiaoshitou-blog-1300729795.cos.ap-chongqing.myqcloud.com/tenxunyun/upload.png" alt=""></p><p><img src="https://xiaoshitou-blog-1300729795.cos.ap-chongqing.myqcloud.com/tenxunyun/server_show.png" alt=""></p><h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><p><strong><a href="https://www.jianshu.com/p/271449df801f" target="_blank" rel="noopener">Hexo 教程：Hexo 博客部署到腾讯云教程</a></strong></p><p><strong><a href="https://blog.csdn.net/StaunchKai/article/details/82878928" target="_blank" rel="noopener">Hexo 博客部署到腾讯云服务器全流程</a></strong></p><p><strong><a href="https://www.cnblogs.com/QcloudYingJoy/p/6550463.html" target="_blank" rel="noopener">在腾讯云上部署Hexo博客</a></strong></p><p><strong><a href="https://blog.csdn.net/gigijingjing/article/details/76726564" target="_blank" rel="noopener">用mac终端连接阿里云服务器出现permission denied</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-购买云服务器&quot;&gt;&lt;a href=&quot;#一-购买云服务器&quot; class=&quot;headerlink&quot; title=&quot;一. 购买云服务器&quot;&gt;&lt;/a&gt;一. 购买云服务器&lt;/h3&gt;&lt;p&gt;打开 &lt;a href=&quot;https://cloud.tencent.com/&quot; targ
      
    
    </summary>
    
    
      <category term="hexo配置" scheme="http://fanandjiu.com/categories/hexo%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="hexo" scheme="http://fanandjiu.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>自定义View-XLNewBottomView</title>
    <link href="http://fanandjiu.com/%E8%87%AA%E5%AE%9A%E4%B9%89View-XLNewBottomView/"/>
    <id>http://fanandjiu.com/%E8%87%AA%E5%AE%9A%E4%B9%89View-XLNewBottomView/</id>
    <published>2020-06-10T11:34:57.000Z</published>
    <updated>2020-06-18T02:59:35.331Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-前言"><a href="#一-前言" class="headerlink" title="一. 前言"></a>一. 前言</h3><p>完善之前的<a href="https://fanandjiu.com/自定义View-XLBottomView/">自定义View-XLBottomView</a></p><p>Github地址：<a href="https://github.com/xiaoshitounen/XLNewBottomView" target="_blank" rel="noopener">XLNewBottomView</a></p><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/Self_View/XLBottomView/XLBottomView.gif" alt=""></p><h3 id="二-问题概述"><a href="#二-问题概述" class="headerlink" title="二. 问题概述"></a>二. 问题概述</h3><p>我们先看，与之前不同的地方，之前的子Item，我是想使用我之前写的自定义View：<a href="https://fanandjiu.com/自定义View-XLItem/">自定义View-XLItem/</a>。</p><p>但是由于我使用之后没有显示出来，就换成了代码里面的 MyItem类 作为代替。</p><p>在这篇文章中，我通过使用 XLNewItem类 来解决过去的问题。</p><p>在 XLItem类中，我是使用 xml文件 加载布局的，肯定在那一部分出现了问题。由于父视图肯定会在 onLayout方法中 让子视图调用其 layout 方法。那么我就在 子视图的 onLayout方法 中使用代码添加控件。</p><h3 id="三-XLNewItem的内容"><a href="#三-XLNewItem的内容" class="headerlink" title="三. XLNewItem的内容"></a>三. XLNewItem的内容</h3><h4 id="1-自定义属性的文件"><a href="#1-自定义属性的文件" class="headerlink" title="1. 自定义属性的文件"></a>1. 自定义属性的文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"XLNewItem"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--图标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"icon_id"</span> <span class="attr">format</span>=<span class="string">"reference"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--标题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">format</span>=<span class="string">"string"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--正常状态的颜色--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"normal_color_item"</span> <span class="attr">format</span>=<span class="string">"color"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--选中状态的颜色--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"select_color_item"</span> <span class="attr">format</span>=<span class="string">"color"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--字体大小--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"text_size"</span> <span class="attr">format</span>=<span class="string">"integer"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--图片的大小--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"icon_size"</span> <span class="attr">format</span>=<span class="string">"integer"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--图片和文本的间隔--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"spacing"</span> <span class="attr">format</span>=<span class="string">"integer"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-自定义的XLNewItem"><a href="#2-自定义的XLNewItem" class="headerlink" title="2. 自定义的XLNewItem"></a>2. 自定义的XLNewItem</h4><p>由于文本居中不好设置，所以我通过自己 drawText 来绘制文本。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XLNewItem</span> <span class="keyword">extends</span> <span class="title">RelativeLayout</span> </span>&#123;</span><br><span class="line">    <span class="comment">//日志</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = XLNewItem<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//资源</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> icon_id = R.drawable.ic_launcher_background;</span><br><span class="line">    <span class="comment">//文本</span></span><br><span class="line">    <span class="keyword">private</span> String title = <span class="string">"测试"</span>;</span><br><span class="line">    <span class="comment">//绘制的画笔</span></span><br><span class="line">    <span class="keyword">private</span> Paint paint;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字体的大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> text_size = <span class="number">14</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片的大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> icon_size = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片和文本的间隔</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> spacing = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正常状态的颜色</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> normal_color = Color.BLACK;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> select_color = Color.MAGENTA;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录自身的索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> item_index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示icon的视图</span></span><br><span class="line">    <span class="keyword">private</span> ImageView icon_view;</span><br><span class="line">    <span class="comment">//显示title的视图</span></span><br><span class="line">    <span class="keyword">private</span> TextView title_view;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按钮的状态-正常</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATUS_NORMAL = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//按钮的状态-选中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATUS_SELECT = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制文本的素材</span></span><br><span class="line">    <span class="keyword">private</span> TextResource textResource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法：Java代码初始化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">XLNewItem</span><span class="params">(Context context, <span class="keyword">int</span> icon_id, String title, <span class="keyword">int</span> item_index, <span class="keyword">int</span> normal_color, <span class="keyword">int</span> select_color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.icon_id = icon_id;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.item_index = item_index;</span><br><span class="line">        <span class="keyword">this</span>.normal_color = normal_color;</span><br><span class="line">        <span class="keyword">this</span>.select_color = select_color;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化操作</span></span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法：Xml代码初始化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> attrs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">XLNewItem</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获得所有属性值的集合</span></span><br><span class="line">        <span class="keyword">if</span> (attrs != <span class="keyword">null</span>)&#123;</span><br><span class="line">            TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.XLNewItem);</span><br><span class="line">            <span class="comment">//2.解析属性</span></span><br><span class="line">            icon_id = typedArray.getResourceId(R.styleable.XLNewItem_icon_id,icon_id);</span><br><span class="line">            title = typedArray.getString(R.styleable.XLNewItem_title);</span><br><span class="line">            normal_color = typedArray.getColor(R.styleable.XLNewItem_normal_color_item,normal_color);</span><br><span class="line">            select_color = typedArray.getColor(R.styleable.XLNewItem_select_color_item,select_color);</span><br><span class="line">            text_size = typedArray.getInteger(R.styleable.XLNewItem_text_size,text_size);</span><br><span class="line">            icon_size = typedArray.getInteger(R.styleable.XLNewItem_icon_size, icon_size);</span><br><span class="line">            spacing = typedArray.getInteger(R.styleable.XLNewItem_spacing,spacing);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.释放资源</span></span><br><span class="line">            typedArray.recycle();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化操作</span></span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//setBackgroundColor(Color.RED);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化画笔信息</span></span><br><span class="line">        paint = <span class="keyword">new</span> Paint();</span><br><span class="line">        paint.setTextSize(PxUtil.spToPx(text_size,getContext()));</span><br><span class="line">        paint.setColor(normal_color);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化绘制字体的信息</span></span><br><span class="line">        textResource = <span class="keyword">new</span> TextResource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 改变状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeStatus</span><span class="params">(<span class="keyword">int</span> status)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span> (status == STATUS_NORMAL)&#123;</span><br><span class="line">            icon_view.setColorFilter(normal_color);</span><br><span class="line"></span><br><span class="line">            paint.setColor(normal_color);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            icon_view.setColorFilter(select_color);</span><br><span class="line"></span><br><span class="line">            paint.setColor(select_color);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//刷新界面</span></span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"DrawAllocation"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onLayout(changed, l, t, r, b);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算文本的宽度，高度</span></span><br><span class="line">        <span class="keyword">int</span> textWidth = (<span class="keyword">int</span>) paint.measureText(title);</span><br><span class="line">        <span class="keyword">int</span> textHeight = (<span class="keyword">int</span>) (paint.getFontMetrics().bottom-paint.getFontMetrics().top);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//图片的大小</span></span><br><span class="line">        <span class="keyword">int</span> icon_size = PxUtil.dpToPx(<span class="keyword">this</span>.icon_size,getContext());</span><br><span class="line">        <span class="comment">//图片的左右间隔</span></span><br><span class="line">        <span class="keyword">int</span> padding_icon = (getWidth() - icon_size) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//图片和上边框的间距</span></span><br><span class="line">        <span class="keyword">int</span> padding_top = PxUtil.dpToPx(<span class="keyword">this</span>.spacing,getContext());</span><br><span class="line">        <span class="comment">//图片和文本的间隔</span></span><br><span class="line">        <span class="keyword">int</span> spacing = PxUtil.dpToPx(<span class="keyword">this</span>.spacing,getContext());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文本的左右间隔</span></span><br><span class="line">        <span class="keyword">int</span> padding_text = (getWidth() - textWidth) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果布局发生改变</span></span><br><span class="line">        <span class="keyword">if</span> (changed)&#123;</span><br><span class="line">            Log.d(TAG,<span class="string">"XLNewItem：+"</span>+item_index+<span class="string">"开始layout了"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建控件</span></span><br><span class="line">            icon_view = <span class="keyword">new</span> ImageView(getContext());</span><br><span class="line">            title_view = <span class="keyword">new</span> TextView(getContext());</span><br><span class="line">            <span class="comment">//设置数据</span></span><br><span class="line">            icon_view.setImageResource(icon_id);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//icon的位置</span></span><br><span class="line">            <span class="keyword">int</span> icon_left = padding_icon;</span><br><span class="line">            <span class="keyword">int</span> icon_top = padding_top;</span><br><span class="line">            <span class="keyword">int</span> icon_right = icon_left + icon_size;</span><br><span class="line">            <span class="keyword">int</span> icon_bottom = icon_top + icon_size;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//text的位置</span></span><br><span class="line">            <span class="keyword">int</span> text_left = padding_text;</span><br><span class="line">            <span class="keyword">int</span> text_top = icon_bottom + spacing;</span><br><span class="line">            <span class="keyword">int</span> text_right = text_left + textWidth;</span><br><span class="line">            <span class="keyword">int</span> text_bottom = text_top + textHeight;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//textResource</span></span><br><span class="line">            textResource.x = text_left;</span><br><span class="line">            <span class="keyword">int</span> distance = (<span class="keyword">int</span>) (textHeight / <span class="number">2</span> - paint.getFontMetrics().bottom);</span><br><span class="line">            textResource.y = text_top + (getHeight()-text_top) / <span class="number">2</span> + distance;</span><br><span class="line">            textResource.text = title;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//layout</span></span><br><span class="line">            icon_view.layout(icon_left,icon_top,icon_right,icon_bottom);</span><br><span class="line">            title_view.layout(text_left,text_top,text_right,text_bottom);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//添加到视图中</span></span><br><span class="line">            addView(icon_view);</span><br><span class="line">            addView(title_view);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//改为选中状态</span></span><br><span class="line">            changeStatus(STATUS_NORMAL);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绘制文本所需要的条件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">TextResource</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line">        String text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">dispatchDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.dispatchDraw(canvas);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绘制文本</span></span><br><span class="line">        canvas.drawText(</span><br><span class="line">                textResource.text,</span><br><span class="line">                textResource.x,</span><br><span class="line">                textResource.y,</span><br><span class="line">                paint</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//setter，getter方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItem_index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item_index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIcon_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> icon_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四-XLNewBottomView"><a href="#四-XLNewBottomView" class="headerlink" title="四. XLNewBottomView"></a>四. XLNewBottomView</h3><h4 id="1-自定义的属性"><a href="#1-自定义的属性" class="headerlink" title="1. 自定义的属性"></a>1. 自定义的属性</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"XLNewBottomView"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--正常状态的颜色--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"normal_color"</span> <span class="attr">format</span>=<span class="string">"color"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--选中状态的颜色--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"select_color"</span> <span class="attr">format</span>=<span class="string">"color"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--两端是否给间距--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"hasLeftOrRightSize"</span> <span class="attr">format</span>=<span class="string">"boolean"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--item的大小--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"item_size"</span> <span class="attr">format</span>=<span class="string">"integer"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--item的布局--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"item_layout"</span> <span class="attr">format</span>=<span class="string">"reference"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--按钮选中状态被点击是否响应事件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"isSelectClick"</span> <span class="attr">format</span>=<span class="string">"boolean"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-XLNewBottomView"><a href="#2-XLNewBottomView" class="headerlink" title="2. XLNewBottomView"></a>2. XLNewBottomView</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XLNewBottomView</span> <span class="keyword">extends</span> <span class="title">RelativeLayout</span> </span>&#123;</span><br><span class="line">    <span class="comment">//日志</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = XLNewBottomView<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line">    <span class="comment">//正常状态的颜色</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> normal_color = Color.BLACK;</span><br><span class="line">    <span class="comment">//选中状态的颜色</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> select_color = Color.MAGENTA;</span><br><span class="line">    <span class="comment">//两端是否给间距</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> hasLeftOrRightSize = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">//item的大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> item_size = <span class="number">50</span>;</span><br><span class="line">    <span class="comment">//按钮选中状态被点击是否响应事件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isSelectClick = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//上一个被选中的</span></span><br><span class="line">    <span class="keyword">private</span> XLNewItem lastItem;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听者</span></span><br><span class="line">    <span class="keyword">private</span> XLBottomViewItemListener listener;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据源</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;XLNewItem&gt; items;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法 Java代码初始化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">XLNewBottomView</span><span class="params">(Context context, <span class="keyword">int</span> normal_color, <span class="keyword">int</span> select_color, <span class="keyword">boolean</span> hasLeftOrRightSize, <span class="keyword">int</span> item_size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.normal_color = normal_color;</span><br><span class="line">        <span class="keyword">this</span>.select_color = select_color;</span><br><span class="line">        <span class="keyword">this</span>.hasLeftOrRightSize = hasLeftOrRightSize;</span><br><span class="line">        <span class="keyword">this</span>.item_size = item_size;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化操作</span></span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法 Xml代码初始化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> attrs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">XLNewBottomView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析</span></span><br><span class="line">        <span class="keyword">if</span> (attrs != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//1.获得所有属性值的集合</span></span><br><span class="line">            TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.XLNewBottomView);</span><br><span class="line">            <span class="comment">//2.解析属性</span></span><br><span class="line">            normal_color = typedArray.getColor(R.styleable.XLNewBottomView_normal_color,normal_color);</span><br><span class="line">            select_color = typedArray.getColor(R.styleable.XLNewBottomView_select_color,select_color);</span><br><span class="line">            hasLeftOrRightSize = typedArray.getBoolean(R.styleable.XLNewBottomView_hasLeftOrRightSize,hasLeftOrRightSize);</span><br><span class="line">            item_size = typedArray.getInteger(R.styleable.XLNewBottomView_item_size,item_size);</span><br><span class="line">            isSelectClick = typedArray.getBoolean(R.styleable.XLNewBottomView_isSelectClick,isSelectClick);</span><br><span class="line">            <span class="comment">//3.释放资源</span></span><br><span class="line">            typedArray.recycle();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化操作</span></span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 子View布局</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> changed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> l</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> r</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG,<span class="string">"XLNewBottomView开始layout了"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//布局是否发生变化</span></span><br><span class="line">        <span class="keyword">if</span> (changed)&#123;</span><br><span class="line">            <span class="comment">//判断是否有数据</span></span><br><span class="line">            <span class="keyword">if</span> (items.size() != <span class="number">0</span>) &#123;</span><br><span class="line">                Log.d(TAG,<span class="string">"数据来了"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//1.计算间距</span></span><br><span class="line">                <span class="keyword">int</span> space_num = hasLeftOrRightSize ? items.size()+<span class="number">1</span> : items.size()-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> horizon_size = (getWidth() - items.size() * PxUtil.dpToPx(item_size,getContext())) / space_num;</span><br><span class="line">                <span class="keyword">int</span> vertical_size = (getHeight()- PxUtil.dpToPx(item_size,getContext())) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//2.根据数据源依次创建视图</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; items.size(); i++) &#123;</span><br><span class="line">                    <span class="comment">//2.1 获取对应的模型数据</span></span><br><span class="line">                    XLNewItem item = items.get(i);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//2.2 创建视图</span></span><br><span class="line">                    <span class="comment">/*@SuppressLint("DrawAllocation") MyItem item_view = new MyItem(</span></span><br><span class="line"><span class="comment">                            getContext(),</span></span><br><span class="line"><span class="comment">                            item.icon_id,</span></span><br><span class="line"><span class="comment">                            item.title,</span></span><br><span class="line"><span class="comment">                            i,</span></span><br><span class="line"><span class="comment">                            normal_color,</span></span><br><span class="line"><span class="comment">                            select_color</span></span><br><span class="line"><span class="comment">                    );*/</span></span><br><span class="line">                    <span class="meta">@SuppressLint</span>(<span class="string">"DrawAllocation"</span>) XLNewItem item_view = <span class="keyword">new</span> XLNewItem(</span><br><span class="line">                            getContext(),</span><br><span class="line">                            item.getIcon_id(),</span><br><span class="line">                            item.getTitle(),</span><br><span class="line">                            i,</span><br><span class="line">                            normal_color,</span><br><span class="line">                            select_color</span><br><span class="line">                    );</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//2.3 设置参数</span></span><br><span class="line">                    <span class="keyword">int</span> left = hasLeftOrRightSize ?</span><br><span class="line">                            horizon_size + (horizon_size + PxUtil.dpToPx(item_size,getContext())) * i</span><br><span class="line">                            :</span><br><span class="line">                            (horizon_size + PxUtil.dpToPx(item_size,getContext())) * i;</span><br><span class="line">                    <span class="keyword">if</span> (!hasLeftOrRightSize)&#123;</span><br><span class="line">                        <span class="comment">//左右两端不设置间距也留一点间距</span></span><br><span class="line">                        <span class="keyword">if</span> (i == <span class="number">0</span>) left += PxUtil.dpToPx(<span class="number">20</span>,getContext());</span><br><span class="line">                        <span class="keyword">if</span> (i == items.size()-<span class="number">1</span>) left -= PxUtil.dpToPx(<span class="number">20</span>,getContext());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">int</span> top = vertical_size;</span><br><span class="line">                    <span class="keyword">int</span> right = left + PxUtil.dpToPx(item_size,getContext());</span><br><span class="line">                    <span class="keyword">int</span> bottom = top + PxUtil.dpToPx(item_size,getContext());</span><br><span class="line">                    item_view.layout(left,top,right,bottom);</span><br><span class="line">                    Log.d(TAG,<span class="string">"left:"</span>+left+<span class="string">" top:"</span>+top);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//2.4 添加视图</span></span><br><span class="line">                    addView(item_view);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//2.5 默认选中第一个</span></span><br><span class="line">                    <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                        item_view.changeStatus(XLNewItem.STATUS_SELECT);</span><br><span class="line"></span><br><span class="line">                        lastItem = item_view;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        item_view.changeStatus(XLNewItem.STATUS_NORMAL);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//2.6 添加点击事件</span></span><br><span class="line">                    item_view.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                            XLNewItem selectItem = (XLNewItem) v;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (!lastItem.equals(selectItem)) &#123;</span><br><span class="line">                                <span class="comment">//1.上一个还原</span></span><br><span class="line">                                lastItem.changeStatus(XLNewItem.STATUS_NORMAL);</span><br><span class="line">                                <span class="comment">//2.当前点选中</span></span><br><span class="line">                                selectItem.changeStatus(XLNewItem.STATUS_SELECT);</span><br><span class="line">                                <span class="comment">//3.记录当前的按钮</span></span><br><span class="line">                                lastItem = selectItem;</span><br><span class="line">                                <span class="comment">//4.回调</span></span><br><span class="line">                                <span class="keyword">if</span> (listener != <span class="keyword">null</span>)&#123;</span><br><span class="line">                                    listener.itemStatusDidChange(selectItem.getItem_index());</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (isSelectClick) &#123;</span><br><span class="line">                                    <span class="comment">//需要回调</span></span><br><span class="line">                                    <span class="keyword">if</span> (listener != <span class="keyword">null</span>)&#123;</span><br><span class="line">                                        listener.itemStatusDidChange(selectItem.getItem_index());</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义回调接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">XLBottomViewItemListener</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">itemStatusDidChange</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//setter方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItems</span><span class="params">(List&lt;XLNewItem&gt; items)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.items = items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setXLBottomViewItemListener</span><span class="params">(XLBottomViewItemListener listener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.listener = listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSelectClick</span><span class="params">(<span class="keyword">boolean</span> select)</span> </span>&#123;</span><br><span class="line">        isSelectClick = select;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五-具体的使用"><a href="#五-具体的使用" class="headerlink" title="五. 具体的使用"></a>五. 具体的使用</h3><p>首先需要添加依赖，添加依赖之后，在布局文件中这样调用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">swu.xl.xlnewbottomview.XLNewBottomView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/bottom_view"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"60dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"#999999"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:normal_color</span>=<span class="string">"#000000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:select_color</span>=<span class="string">"#ff9900"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:hasLeftOrRightSize</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:item_size</span>=<span class="string">"50"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:isSelectClick</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        XLNewBottomView bottomView = findViewById(R.id.bottom_view);</span><br><span class="line"></span><br><span class="line">        List&lt;XLNewItem&gt; items = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        XLNewItem item1 = <span class="keyword">new</span> XLNewItem(</span><br><span class="line">                <span class="keyword">this</span>,</span><br><span class="line">                R.drawable.contact,</span><br><span class="line">                <span class="string">"用户1"</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                Color.BLACK,</span><br><span class="line">                Color.MAGENTA</span><br><span class="line">        );</span><br><span class="line">        XLNewItem item2 = <span class="keyword">new</span> XLNewItem(</span><br><span class="line">                <span class="keyword">this</span>,</span><br><span class="line">                R.drawable.contact,</span><br><span class="line">                <span class="string">"用户2"</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                Color.BLACK,</span><br><span class="line">                Color.MAGENTA</span><br><span class="line">        );</span><br><span class="line">        XLNewItem item3 = <span class="keyword">new</span> XLNewItem(</span><br><span class="line">                <span class="keyword">this</span>,</span><br><span class="line">                R.drawable.contact,</span><br><span class="line">                <span class="string">"用户3"</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                Color.BLACK,</span><br><span class="line">                Color.MAGENTA</span><br><span class="line">        );</span><br><span class="line">        XLNewItem item4 = <span class="keyword">new</span> XLNewItem(</span><br><span class="line">                <span class="keyword">this</span>,</span><br><span class="line">                R.drawable.contact,</span><br><span class="line">                <span class="string">"用户4"</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                Color.BLACK,</span><br><span class="line">                Color.MAGENTA</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        items.add(item1);</span><br><span class="line">        items.add(item2);</span><br><span class="line">        items.add(item3);</span><br><span class="line">        items.add(item4);</span><br><span class="line"></span><br><span class="line">        bottomView.setItems(items);</span><br><span class="line"></span><br><span class="line">        bottomView.setXLBottomViewItemListener(<span class="keyword">new</span> XLNewBottomView.XLBottomViewItemListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">itemStatusDidChange</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">                Toast toast = Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"第"</span> + (index + <span class="number">1</span>) + <span class="string">"个按钮被点击"</span>, Toast.LENGTH_SHORT);</span><br><span class="line">                toast.setGravity(Gravity.CENTER,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">                toast.show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/Self_View/XLBottomView/XLBottomView.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-前言&quot;&gt;&lt;a href=&quot;#一-前言&quot; class=&quot;headerlink&quot; title=&quot;一. 前言&quot;&gt;&lt;/a&gt;一. 前言&lt;/h3&gt;&lt;p&gt;完善之前的&lt;a href=&quot;https://fanandjiu.com/自定义View-XLBottomView/&quot;&gt;自
      
    
    </summary>
    
    
      <category term="Android项目" scheme="http://fanandjiu.com/categories/Android%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Android琐碎知识点" scheme="http://fanandjiu.com/tags/Android%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="Android自定义View" scheme="http://fanandjiu.com/tags/Android%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
  </entry>
  
  <entry>
    <title>自定义View-FloatLayout.md</title>
    <link href="http://fanandjiu.com/%E8%87%AA%E5%AE%9A%E4%B9%89View-FloatLayout/"/>
    <id>http://fanandjiu.com/%E8%87%AA%E5%AE%9A%E4%B9%89View-FloatLayout/</id>
    <published>2020-06-09T11:27:01.000Z</published>
    <updated>2020-06-16T12:52:44.984Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-前言"><a href="#一-前言" class="headerlink" title="一. 前言"></a>一. 前言</h3><p>继承<code>ViewGroup</code>类可以用来重新定义一种布局，只是这种方式比较复杂，需要去实现<code>ViewGroup</code>的测量和布局过程以及处理子元素的测量和布局。组合<code>View</code>也可以采用这种方式来实现，只是需要处理的细节更复杂而已。</p><p>我们这里来实现一个流式布局，什么是流式布局呢？流式布局就是加入此容器的<code>View</code>从左往右依次排列，如果当前行的宽度不够装进下一个<code>View</code>，就会自动将该<code>View</code>放到下一行中去。如下图所示：</p><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/Self_View/FloatLayout/float_layout.png" style="zoom:33%;" /><h4 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1. 需求分析"></a>1. 需求分析</h4><p>① 流式布局需要对每个子<code>View</code>进行布局，即从左往右依次摆放，当前行的宽度不够则从下一行开始。</p><p>② 流式布局需要测量和计算自身的宽高。</p><p>③ 流式布局需要处理<code>margin</code>和<code>padding</code>等细节。</p><p>④ 流式布局需要对外提供一些自定义属性，方便用户去使用。比如可以设置行间距和水平间距等等。</p><h4 id="2-实现步骤"><a href="#2-实现步骤" class="headerlink" title="2. 实现步骤"></a>2. 实现步骤</h4><p>① 自定义属性。</p><p>② 解析自定义属性以及对外提供一些设置属性的接口等。</p><p>③ 重写<code>onMeasure()</code>,实现自身的测量过程。</p><p>④ 重写<code>onLayout()</code>,对子View的位置进行布局。</p><p>⑤ 使用自定义<code>View</code>。</p><h3 id="二-代码实战"><a href="#二-代码实战" class="headerlink" title="二. 代码实战"></a>二. 代码实战</h3><h4 id="1-自定义属性"><a href="#1-自定义属性" class="headerlink" title="1. 自定义属性"></a>1. 自定义属性</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"FloatLayout"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--水平间距--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"horizontalSpace"</span> <span class="attr">format</span>=<span class="string">"integer"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--垂直间距--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"verticalSpace"</span> <span class="attr">format</span>=<span class="string">"integer"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-自定义类的构造方法"><a href="#2-自定义类的构造方法" class="headerlink" title="2. 自定义类的构造方法"></a>2. 自定义类的构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FloatLayout</span> <span class="keyword">extends</span> <span class="title">ViewGroup</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//水平间距</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> horizontalSpace = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//垂直间距</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> verticalSpace = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法：Java代码初始化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FloatLayout</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法：Xml代码初始化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> attrs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FloatLayout</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析属性</span></span><br><span class="line">        <span class="keyword">if</span> (attrs != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//获取所有属性值的集合</span></span><br><span class="line">            TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.FloatLayout);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析每一个属性</span></span><br><span class="line">            horizontalSpace = typedArray.getInteger(R.styleable.FloatLayout_horizontalSpace,horizontalSpace);</span><br><span class="line">            verticalSpace = typedArray.getInteger(R.styleable.FloatLayout_verticalSpace,verticalSpace);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//释放资源</span></span><br><span class="line">            typedArray.recycle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置水平间距</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHorizontalSpace</span><span class="params">(<span class="keyword">int</span> horizontalSpace)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.horizontalSpace = horizontalSpace;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置垂直间距</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVerticalSpace</span><span class="params">(<span class="keyword">int</span> verticalSpace)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.verticalSpace = verticalSpace;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-onMeasure-的过程"><a href="#3-onMeasure-的过程" class="headerlink" title="3. onMeasure 的过程"></a>3. onMeasure 的过程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//因为我们需要支持margin,所以需要重写generateLayoutParams方法并创建MarginLayoutParams对象</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LayoutParams <span class="title">generateLayoutParams</span><span class="params">(AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MarginLayoutParams(getContext(),attrs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">protected ViewGroup.LayoutParams generateLayoutParams(LayoutParams p) &#123;</span></span><br><span class="line"><span class="comment">    return new MarginLayoutParams(p);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">protected LayoutParams generateDefaultLayoutParams() &#123;</span></span><br><span class="line"><span class="comment">    return new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//存储每一行的最大高度</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Integer&gt; heights = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得测量模式和大小</span></span><br><span class="line">    <span class="keyword">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class="line">    <span class="keyword">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line">    <span class="keyword">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class="line">    <span class="keyword">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//wrap_content模式下，存储宽和高</span></span><br><span class="line">    <span class="keyword">int</span> wrapWidth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> wrapHeight = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//padding的宽度</span></span><br><span class="line">    <span class="keyword">int</span> widthUsed = getPaddingLeft() + getPaddingRight();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储当前行的宽度</span></span><br><span class="line">    <span class="keyword">int</span> lineWidth = widthUsed;</span><br><span class="line">    <span class="comment">//存储一行的最大高度</span></span><br><span class="line">    <span class="keyword">int</span> lineHeight = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历子View进行测量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; getChildCount(); i++) &#123;</span><br><span class="line">        <span class="comment">//获取子View</span></span><br><span class="line">        View child = getChildAt(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//子View为GONE则跳过</span></span><br><span class="line">        <span class="keyword">if</span> (child.getVisibility() == View.GONE)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得一个支持margin的布局参数</span></span><br><span class="line">        MarginLayoutParams layoutParams = (MarginLayoutParams) child.getLayoutParams();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测量每个child的宽高，每个child可用的最大宽高为 widthSize-padding-margin</span></span><br><span class="line">        measureChildWithMargins(child,widthMeasureSpec,<span class="number">0</span>,heightMeasureSpec,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//child实际占据的宽高</span></span><br><span class="line">        <span class="keyword">int</span> childWidth = child.getMeasuredWidth() + layoutParams.leftMargin + layoutParams.rightMargin;</span><br><span class="line">        <span class="keyword">int</span> childHeight = child.getMeasuredHeight() + layoutParams.topMargin + layoutParams.bottomMargin;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断这一行还能否装得下这个child</span></span><br><span class="line">        <span class="keyword">if</span> (lineWidth + childWidth &lt;= widthSize) &#123;</span><br><span class="line">            <span class="comment">//装得下,累加宽度,并记录最大高度</span></span><br><span class="line">            lineWidth += childWidth + horizontalSpace;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//最大高度</span></span><br><span class="line">            lineHeight = Math.max(lineHeight,childHeight);</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//装不下,需要换行,记录这一行的宽度,高度,下一行的初始宽度，高度</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//比较当前行宽度和下一行宽度，取最大值</span></span><br><span class="line">            wrapWidth = Math.max(lineWidth - horizontalSpace, widthUsed + childWidth);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//换行，记录新行的初始宽度</span></span><br><span class="line">            lineWidth = widthUsed + childWidth + horizontalSpace;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//累计当前高度</span></span><br><span class="line">            wrapHeight += lineHeight + verticalSpace;</span><br><span class="line">            <span class="comment">//保存每一行的最大高度</span></span><br><span class="line">            heights.add(lineHeight);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//记录下一行的初始高度</span></span><br><span class="line">            lineHeight = childHeight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果是最后一个child,则将当前记录的最大宽度和当前lineWidth做比较</span></span><br><span class="line">        <span class="keyword">if</span> (i == getChildCount() - <span class="number">1</span>)&#123;</span><br><span class="line">            wrapWidth = Math.max(wrapWidth,lineWidth - horizontalSpace);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//累加高度</span></span><br><span class="line">            wrapHeight += lineHeight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据测量模式去保存相应的测量宽度</span></span><br><span class="line">    <span class="comment">//即如果是MeasureSpec.EXACTLY直接使用父ViewGroup传入的宽和高</span></span><br><span class="line">    <span class="comment">//否则设置为自己计算的宽和高，即为warp_content时</span></span><br><span class="line">    setMeasuredDimension(</span><br><span class="line">            (widthMode == MeasureSpec.EXACTLY) ? widthSize : wrapWidth,</span><br><span class="line">            (heightMode == MeasureSpec.EXACTLY) ? heightSize : wrapHeight</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-onLayout过程"><a href="#3-onLayout过程" class="headerlink" title="3. onLayout过程"></a>3. onLayout过程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取视图宽度</span></span><br><span class="line">    <span class="keyword">int</span> width = getWidth();</span><br><span class="line">    <span class="comment">//记录当前行号</span></span><br><span class="line">    <span class="keyword">int</span> line = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//存储padding的宽度</span></span><br><span class="line">    <span class="keyword">int</span> widthUsed = getPaddingLeft() + getPaddingRight();</span><br><span class="line">    <span class="comment">//记录当前行的宽度</span></span><br><span class="line">    <span class="keyword">int</span> lineWidth = widthUsed;</span><br><span class="line">    <span class="comment">//开始的横坐标</span></span><br><span class="line">    <span class="keyword">int</span> left = getPaddingLeft();</span><br><span class="line">    <span class="comment">//开始的纵坐标</span></span><br><span class="line">    <span class="keyword">int</span> top = getPaddingTop();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历所有的子View</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; getChildCount(); i++) &#123;</span><br><span class="line">        <span class="comment">//获取子View</span></span><br><span class="line">        View child = getChildAt(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//子View为GONE则跳过</span></span><br><span class="line">        <span class="keyword">if</span> (child.getVisibility() == View.GONE)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得一个支持margin的布局参数</span></span><br><span class="line">        MarginLayoutParams layoutParams = (MarginLayoutParams) child.getLayoutParams();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//child测量的宽</span></span><br><span class="line">        <span class="keyword">int</span> childWidth = child.getMeasuredWidth();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断这一行是否装得下这个child，需要把margin加上</span></span><br><span class="line">        <span class="keyword">if</span> (lineWidth + childWidth + layoutParams.leftMargin + layoutParams.rightMargin &lt;= width) &#123;</span><br><span class="line">            <span class="comment">//装得下，累加这一行的宽度</span></span><br><span class="line">            lineWidth += childWidth + horizontalSpace;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//装不下,需要换行，记录新行的宽度，并设置新的left，right的位置</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//重置left</span></span><br><span class="line">            left = getPaddingLeft();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//top累加当前行的最大高度和行间距</span></span><br><span class="line">            top += heights.get(line++) + verticalSpace;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//开始新行，记录宽度</span></span><br><span class="line">            lineWidth = widthUsed + childWidth + horizontalSpace;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算child的left，top，right，bottom</span></span><br><span class="line">        <span class="keyword">int</span> lc = left + layoutParams.leftMargin;</span><br><span class="line">        <span class="keyword">int</span> tc = top + layoutParams.topMargin;</span><br><span class="line">        <span class="keyword">int</span> rc = lc + child.getMeasuredWidth();</span><br><span class="line">        <span class="keyword">int</span> bc = tc + child.getMeasuredHeight();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算child的位置</span></span><br><span class="line">        child.layout(lc,tc,rc,bc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//left向右移动一个间距</span></span><br><span class="line">        left = layoutParams.rightMargin + rc + horizontalSpace;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-使用"><a href="#4-使用" class="headerlink" title="4. 使用"></a>4. 使用</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">swu.xl.floatlayout.FloatLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"320dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@color/colorAccent"</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"UI界面"</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"四大组件，七大布局，三大存储"</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"数据库"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginRight</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginBottom</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"自定义View"</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"外部存储"</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"性能优化"</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"UI界面"</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"四大组件，七大布局，三大存储"</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"数据库"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginRight</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginBottom</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"自定义View"</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"外部存储"</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"性能优化"</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">swu.xl.floatlayout.FloatLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-运行结果"><a href="#5-运行结果" class="headerlink" title="5. 运行结果"></a>5. 运行结果</h4><img src="https://android-1300729795.cos.ap-chengdu.myqcloud.com/project/Self_View/FloatLayout/float_layout.png" style="zoom:33%;" /><h4 id="6-源码"><a href="#6-源码" class="headerlink" title="6. 源码"></a>6. 源码</h4><p><a href="https://github.com/xiaoshitounen/FloatLayout" target="_blank" rel="noopener">FloatLayout</a></p><h4 id="7-存在的问题"><a href="#7-存在的问题" class="headerlink" title="7. 存在的问题"></a>7. 存在的问题</h4><p>FloatLayout的宽度设置为wrap_content会存在问题，因为没有衡量的标准，会导致所有的子View全部排成一行的。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><strong><a href="https://www.jianshu.com/p/22fac4d9dc53" target="_blank" rel="noopener">自定义View实践篇（2）- 自定义ViewGroup</a></strong></p><p><strong><a href="https://blog.csdn.net/qiaoidea/article/details/23604529" target="_blank" rel="noopener">自定义ViewGroup支持margin，gravity以及水平，垂直排列</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-前言&quot;&gt;&lt;a href=&quot;#一-前言&quot; class=&quot;headerlink&quot; title=&quot;一. 前言&quot;&gt;&lt;/a&gt;一. 前言&lt;/h3&gt;&lt;p&gt;继承&lt;code&gt;ViewGroup&lt;/code&gt;类可以用来重新定义一种布局，只是这种方式比较复杂，需要去实现&lt;code&gt;
      
    
    </summary>
    
    
      <category term="Android琐碎知识点" scheme="http://fanandjiu.com/categories/Android%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="Android琐碎知识点" scheme="http://fanandjiu.com/tags/Android%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="Android自定义View" scheme="http://fanandjiu.com/tags/Android%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
  </entry>
  
</feed>
